{
  "manifest": {
    "name": "async-cache",
    "version": "1.1.0",
    "description": "Cache your async lookups and don't fetch the same thing more than necessary.",
    "main": "ac.js",
    "files": [
      "ac.js"
    ],
    "dependencies": {
      "lru-cache": "^4.0.0"
    },
    "devDependencies": {
      "standard": "^3.11.0",
      "tap": "^2.0.0"
    },
    "scripts": {
      "test": "standard && tap test/*.js --cov"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/isaacs/async-cache"
    },
    "keywords": [
      "async",
      "cache",
      "lru"
    ],
    "author": {
      "name": "Isaac Z. Schlueter",
      "email": "i@izs.me",
      "url": "http://blog.izs.me/"
    },
    "license": "ISC",
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-async-cache-1.1.0-4a9a5a89d065ec5d8e5254bd9ee96ba76c532b5a-integrity/node_modules/async-cache/package.json",
    "readmeFilename": "README.md",
    "readme": "# async-cache\n\nCache your async lookups and don't fetch the same thing more than\nnecessary.\n\n## Example\n\nLet's say you have to look up stat info from paths.  But you are ok\nwith only looking up the stat info once every 10 minutes (since it\ndoesn't change that often), and you want to limit your cache size to\n1000 objects, and never have two stat calls for the same file\nhappening at the same time (since that's silly and unnecessary).\n\nYou can do this:\n\n```javascript\nvar stats = new AsyncCache({\n  // options passed directly to the internal lru cache\n  max: 1000,\n  maxAge: 1000 * 60 * 10,\n  // method to load a thing if it's not in the cache.\n  // key must be unique in the context of this cache.\n  load: function (key, cb) {\n    // the key can be something like the path, or fd+path, or whatever.\n    // something that will be unique.\n    // this method will only be called if it's not already in cache, and will\n    // cache the result in the lru.\n    getTheStatFromTheKey(key, cb)\n  }\n})\n\n// then later..\nstats.get(fd + ':' + path, function (er, stat) {\n  // maybe loaded from cache, maybe just fetched\n})\n```\n\nExcept for the `load` method, all the options are passed unmolested to\nthe internal [lru-cache](http://npm.im/lru-cache).\n\n### Differences from [lru-cache](http://npm.im/lru-cache)\n\nSince values are fetched asynchronously, the `get` method takes a\ncallback, rather than returning the value synchronously.\n\nWhile there is a `set(k,v)` method to manually seed the cache,\ntypically you'll just call `get` and let the load function fetch the\nkey for you.\n\nKeys must uniquely identify a single object, and must contain all the\ninformation required to fetch an object, and must be strings.\n\n### Per key `maxAge`\n\nIf `load` callback is called with 3 arguments, the 3rd is passed to\nthe internal [lru-cache](http://npm.im/lru-cache) as a `maxAge` for\nthe retrieved key.\n\n```javascript\n  function load (key, cb) {\n    getValueFromTheKey(key, function (err, item) {\n      cb(err, item.value, item.maxAge)\n    })\n  }\n```\n\n## Methods\n\n* `get(key, cb)` If the key is in the cache, then calls `cb(null,\n  cached)` on nextTick.  Otherwise, calls the `load` function that was\n  supplied in the options object.  If it doesn't return an error, then\n  cache the result.  Multiple `get` calls with the same key will only\n  ever have a single `load` call at the same time.\n\n* `set(key, val, maxAge)` Seed the cache.  This doesn't have to be done, but\n  can be convenient if you know that something will be fetched soon.\n  `maxAge` is optional - it is passed to internal LRU cache\n\n* `reset()` Drop all the items in the cache.\n",
    "licenseText": "The ISC License\n\nCopyright (c) Isaac Z. Schlueter\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/async-cache/-/async-cache-1.1.0.tgz#4a9a5a89d065ec5d8e5254bd9ee96ba76c532b5a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/async-cache/-/async-cache-1.1.0.tgz",
    "hash": "4a9a5a89d065ec5d8e5254bd9ee96ba76c532b5a",
    "integrity": "sha1-SppaidBl7F2OUlS9nulrp2xTK1o=",
    "registry": "npm",
    "packageName": "async-cache",
    "cacheIntegrity": "sha512-YDQc4vBn5NFhY6g6HhVshyi3Fy9+SQ5ePnE7JLDJn1DoL+i7ER+vMwtTNOYk9leZkYMnOwpBCWqyLDPw8Aig8g== sha1-SppaidBl7F2OUlS9nulrp2xTK1o="
  },
  "registry": "npm",
  "hash": "4a9a5a89d065ec5d8e5254bd9ee96ba76c532b5a"
}