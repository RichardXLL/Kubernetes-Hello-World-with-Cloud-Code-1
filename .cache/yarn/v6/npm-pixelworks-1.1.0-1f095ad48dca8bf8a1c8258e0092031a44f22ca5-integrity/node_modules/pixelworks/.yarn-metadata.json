{
  "manifest": {
    "name": "pixelworks",
    "version": "1.1.0",
    "description": "Utilities for working with ImageData in Workers",
    "main": "lib/index.js",
    "scripts": {
      "pretest": "eslint lib test examples",
      "test": "karma start test/karma.conf.js --single-run",
      "start": "karma start test/karma.conf.js",
      "bundle": "mkdir -p dist && browserify lib/index.js --standalone pixelworks > dist/pixelworks.js",
      "prepublish": "npm run bundle"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/tschaub/pixelworks.git"
    },
    "bugs": {
      "url": "https://github.com/tschaub/pixelworks/issues"
    },
    "license": "MIT",
    "devDependencies": {
      "browserify": "^13.0.0",
      "chai": "^3.5.0",
      "eslint": "^2.2.0",
      "eslint-config-tschaub": "^4.0.0",
      "karma": "^0.13.21",
      "karma-browserify": "^5.0.2",
      "karma-chrome-launcher": "^0.2.2",
      "karma-mocha": "^0.2.2",
      "karma-sauce-launcher": "^0.3.1",
      "mocha": "^2.4.5",
      "sinon": "^1.17.3",
      "watchify": "^3.7.0"
    },
    "eslintConfig": {
      "extends": "tschaub",
      "globals": {
        "ImageData": false
      },
      "rules": {
        "dot-notation": 0
      }
    },
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-pixelworks-1.1.0-1f095ad48dca8bf8a1c8258e0092031a44f22ca5-integrity/node_modules/pixelworks/package.json",
    "readmeFilename": "readme.md",
    "readme": "# **pixelworks**\n\nUtilities for working with [`ImageData`](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) in [`Workers`](https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker).\n\n## Install\n\nThe `pixelworks` package is meant to be used in a browser with a CommonJS module loader (e.g. [Browserify](http://browserify.org/) or [Webpack](http://webpack.github.io/)).  Add it as a dependency to your project with `npm`:\n\n    npm install pixelworks\n\n## Use\n\n    var pixelworks = require('pixelworks');\n\nThe package also comes with a standalone build in the `dist` directory that can be added to a page with a script tag.  If a module loader is not present, this script will make a global `pixelworks` object available.\n\n## API\n\n### `new Processor(options)`\n\nA processor runs pixel or image operations in workers.\n\n    var processor = new pixelworks.Processor(options);\n\n#### Supported options\n\n * <a id=\"optionsimageops\">`imageOps : boolean`</a> - By default, operations will be called for each pixel.  By setting `imageOps: true`, operations will be called with an `ImageData` object.\n\n * <a id=\"optionsoperations\">`operation : Function`</a> - A function that processes input data and returns output data.  The operation will be called with two arguments: an array of inputs, and a user storage object.  By default, operations will be called for each pixel in the input data, and the first argument is an array of input pixels (each a `[R, G, B, A]` array).  If `imageOps` is `false`, the first argument will be an array of `ImageData` objects.  The second object is the user storage object passed to the `process` method.\n\n Operations return processed output data.  For pixel-wise operations, this must be an output pixel (a `[R, G, B, A]` array).  For image operations, this must be an `ImageData` object.\n\n Because operations run in workers, they must only operate on the arguments they are given.\n\n * <a id=\"optionslib\">`lib : Object`</a> - An optional lookup of functions that can be accessed by an operation run in a worker.  Because operations are run in workers, they cannot access functions from the scope where they are authored.  The `lib` object can be used to pass additional library functions that are made available in the worker scope.  For example, if `{lib: {someFunc: function() {/* do something */}}}` were provided, the operation could call `someFunc()`.\n\n * <a id=\"optionsthreads\">`threads : number`</a> - Pixel-wise operations can be run in parallel in multiple worker threads.  By default, a single worker thread is created for running operations.  Setting `threads: 2` would process half of the input pixels in one thread and half in another.  For image type operations, `threads` cannot be greater than `1`.  If you want to force operations to run in the main (UI) thread, set `threads: 0`.\n\n * <a id=\"optionsqueue\">`queue : number`</a> - Maximum queue length.  This limits the number of pending workers when `process` is called multiple times before work completes.  If you want to call `process` many times (in response to user generated events for example), set `queue: 1`, and only one worker will be pending at a time.\n\n### `processor.process(inputs, meta, callback)`\n\nRun the operation on an array of input image data.\n\n * `inputs : Array.<ImageData>` - Array of pixels or image data (depending on the operation type).\n * `meta : Object` - A user data object.  This is passed to all operations and must be serializable.\n * `callback : function(Error, ImageData, Object)` - Called when work completes.  The first argument is any error.  The second is the `ImageData` generated by the operation.  The third is the user data object.  When `process` is called repeatedly, a queue of pending workers will be generated.  If this queue exceeds the maximum `queue` length, workers will be removed from the queue and the callback will be called with `null` for the second `ImageData` argument.\n\n### `processor.destroy()`\n\nStop responding to any completed work and destroy the processor.\n\n\n[![Current Status](https://secure.travis-ci.org/tschaub/pixelworks.svg?branch=master)](https://travis-ci.org/tschaub/pixelworks)\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/pixelworks/-/pixelworks-1.1.0.tgz#1f095ad48dca8bf8a1c8258e0092031a44f22ca5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/pixelworks/-/pixelworks-1.1.0.tgz",
    "hash": "1f095ad48dca8bf8a1c8258e0092031a44f22ca5",
    "integrity": "sha1-Hwla1I3Ki/ihyCWOAJIDGkTyLKU=",
    "registry": "npm",
    "packageName": "pixelworks",
    "cacheIntegrity": "sha512-nDqeyp0pvOvCihLsyc9GHWKP4THUtcfQ+qs61uiVaZdlNv0j7y6PWNyPfnTtuxMJ+MTAqff2QbbM/1DyCcRdOQ== sha1-Hwla1I3Ki/ihyCWOAJIDGkTyLKU="
  },
  "registry": "npm",
  "hash": "1f095ad48dca8bf8a1c8258e0092031a44f22ca5"
}