{
  "manifest": {
    "name": "react-focus-lock",
    "version": "2.4.1",
    "description": "It is a trap! (for a focus)",
    "main": "dist/cjs/index.js",
    "jsnext:main": "dist/es2015/index.js",
    "module": "dist/es2015/index.js",
    "types": "react-focus-lock.d.ts",
    "sideEffects": [
      "**/sidecar.js"
    ],
    "scripts": {
      "build:cjs": "NODE_ENV=cjs babel src -d dist/cjs",
      "build:es5": "NODE_ENV=es2015 babel src -d dist/es2015",
      "build": "rm -Rf ./dist && yarn build:es5 && yarn build:cjs",
      "test": "npm run test:pick -- '_tests/**/*spec.js'",
      "test:pick": "NODE_ENV=cjs mocha --require @babel/register --require jsdom-global/register --require _tests/spinup/scaffolding ",
      "prepublish": "npm run lint:fix && npm run build && npm run changelog",
      "lint": "eslint src",
      "lint:fix": "eslint src --fix",
      "storybook": "NODE_ENV=es2015 start-storybook -p 6006",
      "build-storybook": "NODE_ENV=es2015 build-storybook",
      "package-self": "package-self",
      "size": "yarn build && yarn size-limit",
      "changelog": "conventional-changelog -p angular -i CHANGELOG.md -s -r 0"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/theKashey/react-focus-lock.git"
    },
    "files": [
      "dist",
      "sidecar",
      "UI",
      "interfaces.d.ts",
      "react-focus-lock.d.ts"
    ],
    "keywords": [
      "react",
      "focus",
      "lock",
      "trap",
      "tabbable"
    ],
    "author": {
      "name": "theKashey",
      "email": "thekashey@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/theKashey/react-focus-lock/issues"
    },
    "peerDependencies": {
      "react": "^16.8.0"
    },
    "devDependencies": {
      "@babel/cli": "^7.0.0",
      "@babel/core": "^7.0.0",
      "@babel/plugin-proposal-class-properties": "^7.0.0",
      "@babel/plugin-syntax-dynamic-import": "^7.2.0",
      "@babel/plugin-transform-runtime": "^7.1.0",
      "@babel/polyfill": "^7.0.0",
      "@babel/preset-env": "^7.0.0",
      "@babel/preset-react": "^7.0.0",
      "@babel/register": "^7.0.0",
      "@size-limit/preset-small-lib": "^4.5.0",
      "@storybook/addon-actions": "^5.1.8",
      "@storybook/addon-links": "^5.1.8",
      "@storybook/react": "^5.1.8",
      "@types/react": "^16.8.19",
      "babel-eslint": "^10.0.1",
      "babel-loader": "^8.0.4",
      "babel-plugin-transform-react-remove-prop-types": "^0.4.19",
      "chai": "^4.1.0",
      "chai-enzyme": "^1.0.0-beta.0",
      "conventional-changelog-cli": "^2.0.12",
      "enzyme": "^3.3.0",
      "enzyme-adapter-react-16": "^1.15.2",
      "eslint": "^5.16.0",
      "eslint-config-airbnb": "^17.1.0",
      "eslint-plugin-import": "^2.17.3",
      "eslint-plugin-jsx-a11y": "^6.2.1",
      "eslint-plugin-mocha": "^5.3.0",
      "eslint-plugin-react": "^7.13.0",
      "jsdom": "15.1.1",
      "jsdom-global": "3.0.2",
      "material-ui": "^0.20.0",
      "mocha": "^6.1.4",
      "package-self": "^1.1.1",
      "react": "^16.8.6",
      "react-dom": "^16.8.6",
      "react-hot-loader": "^4.11.0",
      "react-test-renderer": "^16.2.0",
      "sinon": "7.3.2",
      "size-limit": "^4.5.0"
    },
    "homepage": "https://github.com/theKashey/react-focus-lock#readme",
    "dependencies": {
      "@babel/runtime": "^7.0.0",
      "focus-lock": "^0.7.0",
      "prop-types": "^15.6.2",
      "react-clientside-effect": "^1.2.2",
      "use-callback-ref": "^1.2.1",
      "use-sidecar": "^1.0.1"
    },
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-react-focus-lock-2.4.1-e842cc93da736b5c5d331799012544295cbcee4f-integrity/node_modules/react-focus-lock/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"left\">\n  <h1 align=\"center\">REACT FOCUS LOCK</h1>\n  <img src=\"./assets/ackbar.png\" alt=\"it-is-a-trap\" width=\"200\" height=\"200\" align=\"right\">\n  \n  - browser friendly focus lock<br/>\n  - matching all your use cases<br/>\n  - trusted by best UI frameworks<br/>\n  - the thing Admiral Ackbar was talking about<br/>\n  <br/>\n\n[![CircleCI status](https://img.shields.io/circleci/project/github/theKashey/react-focus-lock/master.svg?style=flat-square)](https://circleci.com/gh/theKashey/react-focus-lock/tree/master)\n[![npm](https://img.shields.io/npm/v/react-focus-lock.svg)](https://www.npmjs.com/package/react-focus-lock)\n[![bundle size](https://badgen.net/bundlephobia/minzip/react-focus-lock)](https://bundlephobia.com/result?p=react-focus-lock)\n[![downloads](https://badgen.net/npm/dm/react-focus-lock)](https://www.npmtrends.com/react-focus-lock)\n  <hr/>  \n</div>\n\nIt is a trap! We got your focus and will not let him out!\n\n- Modal dialogs. You can not leave it with \"Tab\", ie do a \"tab-out\".\n- Focused tasks. It will aways brings you back, as you can \"lock\" user inside a component.\n- Any any other case, when you have to lock user _intention_ and _focus_, if that's what `a11y` is asking for.\n\n### Trusted\nTrusted by \n[Atlassian AtlasKit](https://atlaskit.atlassian.com), \n[ReachUI](https://ui.reach.tech/), \n[SmoothUI](https://smooth-ui.smooth-code.com/), \n[Storybook](https://storybook.js.org/)\nand we will do our best to earn your trust too!\n \n# Features\n - no keyboard control, everything is done watching a __focus behavior__, not emulating it. Thus works always and everywhere.\n - React __Portals__ support. Even if some data is in outer space - it is [still in lock](https://github.com/theKashey/react-focus-lock/issues/19).\n - _Scattered_ locks, or focus lock groups - you can setup different isolated locks, and _tab_ from one to another.\n - Controllable isolation level.\n - variable size bundle. Uses sidecar to trim UI part to 1.5kb. \n \n> 💡 __focus__ locks is only the first part, there are also __scroll lock__ and __text-to-speech__ lock\nyou have to use to really \"lock\" the user.\nTry [react-focus-on](https://github.com/theKashey/react-focus-on) to archive everything above, assembled in the right order. \n \n# How to use\nJust wrap something with focus lock, and focus will be `moved inside` on mount.\n```js\n import FocusLock from 'react-focus-lock';\n\n const JailForAFocus = ({onClose}) => (\n    <FocusLock>\n      You can not leave this form\n      <button onClick={onClose} />\n    </FocusLock>\n );\n```\nDemo - https://codesandbox.io/s/5wmrwlvxv4.\n\n# WHY?\nFrom [MDN Article about accessible dialogs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_dialog_role):\n - The dialog must be properly labeled\n - Keyboard __focus must be managed__ correctly\n \nThis one is about managing the focus.\n\nI've got a good [article about focus management, dialogs and  WAI-ARIA](https://medium.com/@antonkorzunov/its-a-focus-trap-699a04d66fb5).    \n\n# API\n> FocusLock would work perfectly even with no props set.\n\n FocusLock has few props to tune behavior, all props are optional:\n  - `disabled`, to disable(enable) behavior without altering the tree.\n  - `returnFocus`, to return focus into initial position on unmount(not disable).\n> By default `returnFocus` is disabled, so FocusLock will __not__ restore original focus on deactivation.\n    \n  This is expected behavior for Modals, but it is better to implement it by your self. See [unmounting and focus management](https://github.com/theKashey/react-focus-lock#unmounting-and-focus-management) for details\n  - `persistentFocus=false`, requires any element to be focused. This also disables text selections inside, and __outside__ focus lock.\n  - `autoFocus=true`, enables or disables focusing into on Lock activation. If disabled Lock will blur an active focus.\n  - `noFocusGuards=false` disabled _focus guards_ - virtual inputs which secure tab index.\n  - `group='''` named focus group for focus scattering aka [combined lock targets](https://github.com/theKashey/vue-focus-lock/issues/2)\n  - `shards=[]` an array of `ref` pointing to the nodes, which focus lock should consider and a part of it. This is another way focus scattering.  \n  - `whiteList=fn` you could _whitelist_ locations FocusLock should carry about. Everything outside it will ignore. For example - any modals.\n  - `as='div'` if you need to change internal `div` element, to any other. Use ref forwarding to give FocusLock the node to work with.\n  - `lockProps={}` to pass any extra props (except className) to the internal wrapper.\n\n### Focusing in OSX (Safari/Firefox) is strange!\nBy default `tabbing` in OSX `sees` only controls, but not links or anything else `tabbable`. This is system settings, and Safari/Firefox obey.\nPress Option+Tab in Safari to loop across all tabbables, or change the Safari settings. There is no way to _fix_ Firefox, unless change system settings (Control+F7). See [this issue](https://github.com/theKashey/react-focus-lock/issues/24) for more information.\n\n## Set up\n### Requirements\n- version 1x is React 15/16 compatible\n- version 2+ requires React 16.8+ (hooks)\n### Import\n`react-focus-lock` exposed __3 entry points__: for the classical usage, and a _sidecar_ one.\n#### Default usage\n- 4kb, `import FocusLock from 'react-focus-lock` would give you component you are looking for.\n\n#### Separated usage\nMeanwhile - you dont need any focus related logic until it's needed.\nThus - you may defer that logic till Lock activation and move all related code to a _sidecar_.\n\n- UI, __1.5kb__, `import FocusLockUI from 'react-focus-lock/UI` - a DOM part of a lock.\n- Sidecar, 3.5kb, `import Sidecar from 'react-focus-lock/sidecar` - which is the real focus lock.\n\n```js\nimport FocusLockUI from \"react-focus-lock/UI\";\nimport {sidecar} from \"use-sidecar\";\n\n// prefetch sidecar. data would be loaded, but js would not be executed\nconst FocusLockSidecar = sidecar(  \n  () => import(/* webpackPrefetch: true */ \"react-focus-lock/sidecar\")\n);\n\n<FocusLockUI\n    disabled={this.state.disabled}\n    sideCar={FocusLockSidecar}\n>\n {content}\n</FocusLockUI> \n```\nThat would split FocusLock into two pieces, reducing app size and improving the first load.\nThe cost of focus-lock is just 1.5kb!\n\n> Saved 3.5kb?! 🤷‍♂️ 3.5kb here and 3.5kb here, and your 20mb bundle is ready.\n\n# Autofocus\n Use when you cannot use the native `autoFocus` prop - because you only want to autofocus once the Trap has been activated\n      \n - prop `data-autofocus` on the element.\n - prop `data-autofocus-inside` on the element to focus on something inside.\n - `AutoFocusInside` component, as named export of this library.\n```js\n import FocusLock, { AutoFocusInside } from 'react-focus-lock';\n \n <FocusLock>\n   <button>Click</button>\n   <AutoFocusInside>\n    <button>will be focused</button>\n   </AutoFocusInside>\n </FocusLock>\n // is the same as\n \n <FocusLock>\n   <button>Click</button>\n    <button data-autofocus>will be focused</button>\n </FocusLock>\n ```\n \n If there is more than one auto-focusable target - the first will be selected.\n If it is a part of radio group, and __rest of radio group element are also autofocusable__(just put them into AutoFocusInside) - \n checked one fill be selected.\n \n `AutoFocusInside` will work only on Lock activation, and does nothing, then used outside of the lock.\n You can use `MoveFocusInside` to move focus inside with or without lock.\n \n```js\n import { MoveFocusInside } from 'react-focus-lock';\n    \n <MoveFocusInside>\n  <button>will be focused</button>\n </MoveFocusInside>\n ```\n \n# Portals\nUse focus scattering to handle portals\n\n- using `groups`. Just create a few locks (only one could be active) with a same group name\n```js\nconst PortaledElement = () => (\n   <FocusLock group=\"group42\" disabled={true}>\n     // \"discoverable\" portaled content\n   </FocusLock>  \n);\n\n<FocusLock group=\"group42\">\n  // main content\n</FocusLock>\n```\n- using `shards`. Just pass all the pieces to the \"shards\" prop. \n```js\nconst PortaledElement = () => (\n   <div ref={ref}>\n     // \"discoverable\" portaled content\n   </div>  \n);\n\n<FocusLock shards={[ref]}>\n  // main content\n</FocusLock>\n```\n- without anything. FocusLock will not prevent focusing portaled element, but will not include them in to tab order \n```js\nconst PortaledElement = () => (\n   <div>\n     // NON-\"discoverable\" portaled content\n   </div>  \n);\n\n<FocusLock shards={[ref]}>\n  // main content\n  <PortaledElement />\n</FocusLock>\n```\n\n### Using your own `Components`\nYou may use `as` prop to change _what_ Focus-Lock will render around `children`.\n```js\n<FocusLock as=\"section\">\n    <button>Click</button>\n    <button data-autofocus>will be focused</button>\n </FocusLock>\n \n <FocusLock as={AnotherComponent} lockProps={{anyAnotherComponentProp: 4}}>\n    <button>Click</button>\n    <span>Hello there!</span>\n </FocusLock>\n``` \n\n### Guarding\nAs you may know - FocusLock is adding `Focus Guards` before and after lock to remove some side effects, like page scrolling.\nBut `shards` will not have such guards, and it might be not so cool to use them - for example if no `tabbable` would be\ndefined after shard - you will tab to the browser chrome.\n\nYou may wrap shard  with `InFocusGuard` or just drop `InFocusGuard` here and there - that would solve the problem.\n```js\nimport {InFocusGuard} from 'react-focus-lock';\n\n// wrap with\n<InFocusGuard>\n  <button />\n</InFocusGuard>\n\n// place before and after\n<InFocusGuard />\n<button />\n<InFocusGuard />\n```\nInFocusGuards would be active(tabbable) only when tabble, it protecting, is focused.\n\n#### Removing Tailing Guard\nIf only your modal is the last tabble element on the body - you might remove the Tailing Guard,\nto allow user _tab_ into address bar.\n```js\n<InFocusGuard/>\n<button />  \n// there is no \"tailing\" guard :)\n```\n \n# Unmounting and focus management\n - In case FocusLock has `returnFocus` enabled, and it's going to be unmounted - focus will be returned after zero-timeout.\n - In case `returnFocus` is set to `false`, and you are going to control focus change on your own - keep in mind\n >> React will first call Parent.componentWillUnmount, and next Child.componentWillUnmount\n \n This means - Trap will be still active by the time you _may_ want move(return) focus on componentWillUnmount. Please deffer this action with a zero-timeout.\n \n Similarly, if you are using the `disabled` prop to control FocusLock, you will need a zero-timeout to correctly restore focus.\n \n```\n<FocusLock\n  disabled={isFocusLockDisabled}\n  onDeactivation={() => {\n    // Without the zero-timeout, focus will likely remain on the button/control\n    // you used to set isFocusLockDisabled = true\n    window.setTimeout(() => myRef.current.focus(), 0);\n  }\n>\n```\n\n## Return focus with no scroll\n> read more at the [issue #83](https://github.com/theKashey/react-focus-lock/issues/83) or\n[mdn article](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus).\n\nTo return focus, but without _jumpy_ page scroll returning a focus you might specify a focus option\n```js\n<FocusLock\n  returnFocus={{ preventScroll: false }} // working not in all browsers\n>   \n```  \nNot supported by Edge and Safari.\n\n# Not only for React\n Uses [focus-lock](https://github.com/theKashey/focus-lock/) under the hood. It does also provide support for Vue.js and Vanilla DOM solutions\n \n# Warning!\nTwo different _focus-lock-managers_ or even different version of a single one, active\nsimultaneously will FIGHT!\n\n__Focus-lock will surrender__, as long any other focus management library will not.\n\n## Focus fighting\nYou may wrap some render branch with `FreeFocusInside`, and react-focus-lock __will ignore__\nany focus inside marked node, thus landing a peace.\n\n```js\nimport { FreeFocusInside } from 'react-focus-lock';\n\n<FreeFocusInside>\n <div id=\"portal-for-modals\">\n   in this div i am going to portal my modals, dont fight with them please\n </div>\n</FreeFocusInside>\n```\n\nEven the better is to `whiteList` FocusLock areas - for example \"you should handle only React Stuff in React Root\"\n```js\n<FocusLock whiteList={node => document.getElementById('root').contains(node)}>\n ...\n</FocusLock>\n```\n\nPS: __please use webpack or yarn resolution for force one version of react-focus-lock used__\n\n> webpack.conf\n```js\n resolve: {    \n    alias: {\n      'react-focus-lock': path.resolve(path.join(__dirname, './node_modules/react-focus-lock'))\n ...\n```\n\n# More\nTo create a \"right\" modal dialog you have to:\n- manage a focus. Use this library\n- block document scroll. Use [react-scroll-locky](https://github.com/theKashey/react-scroll-locky).\n- hide everything else from screen readers. Use [aria-hidden](https://github.com/theKashey/aria-hidden)\n\nYou may use [react-focus-on](https://github.com/theKashey/react-focus-on) to archive everything above, assembled in the right order.\n\n# Licence\n MIT\n \n \n",
    "licenseText": "MIT License\n\nCopyright (c) 2017 Anton\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-focus-lock/-/react-focus-lock-2.4.1.tgz#e842cc93da736b5c5d331799012544295cbcee4f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-focus-lock/-/react-focus-lock-2.4.1.tgz",
    "hash": "e842cc93da736b5c5d331799012544295cbcee4f",
    "integrity": "sha512-c5ZP56KSpj9EAxzScTqQO7bQQNPltf/W1ZEBDqNDOV1XOIwvAyHX0O7db9ekiAtxyKgnqZjQlLppVg94fUeL9w==",
    "registry": "npm",
    "packageName": "react-focus-lock",
    "cacheIntegrity": "sha512-c5ZP56KSpj9EAxzScTqQO7bQQNPltf/W1ZEBDqNDOV1XOIwvAyHX0O7db9ekiAtxyKgnqZjQlLppVg94fUeL9w== sha1-6ELMk9pza1xdMxeZASVEKVy87k8="
  },
  "registry": "npm",
  "hash": "e842cc93da736b5c5d331799012544295cbcee4f"
}