{
  "manifest": {
    "name": "react-circular-progressbar",
    "version": "2.0.3",
    "description": "A circular progress indicator component",
    "author": {
      "name": "Kevin Qi",
      "email": "iqnivek@gmail.com"
    },
    "main": "dist/index.js",
    "module": "dist/index.esm.js",
    "types": "dist/index.d.ts",
    "style": "dist/styles.css",
    "files": [
      "dist"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/kevinsqi/react-circular-progressbar.git"
    },
    "license": "MIT",
    "keywords": [
      "progressbar",
      "react",
      "react-component",
      "svg"
    ],
    "scripts": {
      "build": "npm-run-all clean build:css build:js",
      "build:css": "postcss src/styles.css --use autoprefixer -d dist/ --no-map",
      "build:js": "rollup -c",
      "clean": "rimraf dist",
      "format": "prettier --write 'src/**/*' 'demo/src/**/*'",
      "prepare": "npm-run-all clean build",
      "start": "npm-run-all --parallel start:css start:js",
      "start:css": "postcss src/styles.css --use autoprefixer -d dist/ --no-map --watch",
      "start:js": "rollup -c -w",
      "test": "jest --config jest.config.json --coverage"
    },
    "devDependencies": {
      "@types/enzyme": "^3.9.1",
      "@types/enzyme-adapter-react-16": "^1.0.5",
      "@types/jest": "^24.0.11",
      "@types/react": "^16.8.14",
      "autoprefixer": "^9.5.1",
      "enzyme": "^3.9.0",
      "enzyme-adapter-react-16": "^1.12.1",
      "jest": "^24.7.1",
      "npm-run-all": "^4.1.5",
      "postcss-cli": "^6.1.2",
      "prettier": "^1.17.0",
      "react": "^16.8.6",
      "react-dom": "^16.8.6",
      "rimraf": "^2.3.4",
      "rollup": "^1.10.1",
      "rollup-plugin-typescript2": "^0.21.0",
      "ts-jest": "^24.0.2",
      "typescript": "^3.4.4"
    },
    "dependencies": {},
    "peerDependencies": {
      "react": "^0.14.0 || ^15.0.0 || ^16.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-react-circular-progressbar-2.0.3-fa8eb59f8db168d2904bae4590641792c80f5991-integrity/node_modules/react-circular-progressbar/package.json",
    "readmeFilename": "README.md",
    "readme": "# React Circular Progressbar\n\n[![npm version](https://badge.fury.io/js/react-circular-progressbar.svg)](https://www.npmjs.com/package/react-circular-progressbar)\n[![Build Status](https://travis-ci.org/kevinsqi/react-circular-progressbar.svg?branch=master)](https://travis-ci.org/kevinsqi/react-circular-progressbar)\n[![Bundle size](https://img.shields.io/bundlephobia/min/react-circular-progressbar.svg)](https://bundlephobia.com/result?p=react-circular-progressbar)\n\nA circular progressbar component, built with SVG and extensively customizable. [**Try it out on CodeSandbox**](https://codesandbox.io/s/vymm4oln6y).\n\n<a href=\"https://codesandbox.io/s/vymm4oln6y\"><img height=\"100\" src=\"/demo/public/images/animated-progressbar.gif?raw=true\" alt=\"animated progressbar\" /></a> <a href=\"https://codesandbox.io/s/vymm4oln6y\"><img height=\"100\" src=\"/demo/public/images/circular-progressbar-examples.png?raw=true\" alt=\"progressbar examples\" /></a>\n\n## Version 2.0.0 is out! üëã\n\n**New features:**\n\n- Use `import { CircularProgressbarWithChildren }` in order to [put arbitrary JSX inside the component](/README.md#adding-arbitrary-text-or-content-inside-the-progressbar).\n- Use `import { buildStyles }` to make it easier to [customize styles](/README.md#using-the-styles-prop).\n- Use `props.minValue` and `props.maxValue` to specify a range other than 0-100.\n\n**Breaking changes:** if you're upgrading from an older version, take a look at [UPGRADING.md](/UPGRADING.md) for instructions on how to migrate.\n\nDocumentation for v1.x.x will still be available at [README_v1.md](/README_v1.md).\n\n## Installation\n\nInstall with yarn:\n\n```bash\nyarn add react-circular-progressbar\n```\n\nor npm:\n\n```bash\nnpm install --save react-circular-progressbar\n```\n\n## Usage\n\nImport the component and default styles:\n\n```javascript\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\n```\n\n**Note**: Importing CSS requires a CSS loader (if you're using create-react-app, this is already set up for you). If you don't have a CSS loader, you can copy [styles.css](src/styles.css) into your project instead.\n\nNow you can use the component:\n\n```jsx\nconst percentage = 66;\n\n<CircularProgressbar value={percentage} text={`${percentage}%`} />;\n```\n\nIf your values are not in percentages, you can adjust `minValue` and `maxValue` to select the scale you want:\n\n```jsx\nconst value = 0.66;\n\n<CircularProgressbar value={value} maxValue={1} text={`${value * 100}%`} />;\n```\n\n## Props\n\n[**Take a look at the CodeSandbox**](https://codesandbox.io/s/vymm4oln6y) for interactive examples on how to use these props.\n\n‚ÑπÔ∏è Version 1.0.0 removed the `classForPercentage` and `textForPercentage` props in favor of `className` and `text` props. Version 2.0.0 replaces `percentage` with `value` and removes the `initialAnimation` prop. Take a look at [UPGRADING.md](/UPGRADING.md) for instructions on how to migrate.\n\n| Name                | Description                                                                                                                                                                                                                            |\n| ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `value`             | Completion value of the progressbar, from `minValue` to `maxValue`. Required.                                                                                                                                                          |\n| `minValue`          | Minimum value of the progressbar. Default: `0`.                                                                                                                                                                                        |\n| `maxValue`          | Maximum value of the progressbar. Default: `100`.                                                                                                                                                                                      |\n| `className`         | Classes to apply to the svg element. Default: `''`.                                                                                                                                                                                    |\n| `text`              | Text to display inside progressbar. Default: `''`.                                                                                                                                                                                     |\n| `strokeWidth`       | Width of circular line relative to total width of component, a value from 0-100. Default: `8`.                                                                                                                                         |\n| `background`        | Whether to display background color. Default: `false`.                                                                                                                                                                                 |\n| `backgroundPadding` | Padding between background circle and path/trail relative to total width of component. Only used if `background` is `true`. Default: `0`.                                                                                              |\n| `counterClockwise`  | Whether to rotate progressbar in counterclockwise direction. Default: `false`.                                                                                                                                                         |\n| `circleRatio`       | Number from 0-1 representing ratio of the full circle diameter the progressbar should use. Default: `1`.                                                                                                                               |\n| `classes`           | Object allowing overrides of classNames of each svg subcomponent (root, trail, path, text, background). Enables styling with react-jss. See [this PR](https://github.com/kevinsqi/react-circular-progressbar/pull/25) for more detail. |\n| `styles`            | Object allowing customization of styles of each svg subcomponent (root, trail, path, text, background).                                                                                                                                |\n\n## Theming (customizing styles)\n\nUse CSS or inline styles to customize the styling - the default CSS is a good starting point, but you can override it as needed.\n\n#### Using the `styles` prop\n\nYou can use the `styles` prop to customize each part of the progressbar (the root svg, path, trail, text, and background). This uses the native `style` prop for each subcomponent, so you can use any CSS properties here, not just the ones mentioned below.\n\nAs a convenience, you can use `buildStyles` to configure the most common style changes:\n\n```jsx\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\n\nconst percentage = 66;\n\n<CircularProgressbar\n  value={percentage}\n  text={`${percentage}%`}\n  styles={buildStyles({\n    // Rotation of path and trail, in number of turns (0-1)\n    rotation: 0.25,\n\n    // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n    strokeLinecap: 'butt',\n\n    // Text size\n    textSize: '16px',\n\n    // How long animation takes to go from one percentage to another, in seconds\n    pathTransitionDuration: 0.5,\n\n    // Can specify path transition in more detail, or remove it entirely\n    // pathTransition: 'none',\n\n    // Colors\n    pathColor: `rgba(62, 152, 199, ${percentage / 100})`,\n    textColor: '#f88',\n    trailColor: '#d6d6d6',\n    backgroundColor: '#3e98c7',\n  })}\n/>;\n```\n\n`buildStyles` is a shorthand, but you can also build the `styles` object yourself. It's an object with `root`, `path`, `trail`, `text`, and `background` properties, which are each a set of inline styles to apply to the relevant SVG subcomponent. Here's the equivalent set of styles as above, without using `buildStyles`:\n\n```jsx\n<CircularProgressbar\n  value={percentage}\n  text={`${percentage}%`}\n  styles={{\n    // Customize the root svg element\n    root: {},\n    // Customize the path, i.e. the \"completed progress\"\n    path: {\n      // Path color\n      stroke: `rgba(62, 152, 199, ${percentage / 100})`,\n      // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n      strokeLinecap: 'butt',\n      // Customize transition animation\n      transition: 'stroke-dashoffset 0.5s ease 0s',\n      // Rotate the path\n      transform: 'rotate(0.25turn)',\n      transformOrigin: 'center center',\n    },\n    // Customize the circle behind the path, i.e. the \"total progress\"\n    trail: {\n      // Trail color\n      stroke: '#d6d6d6',\n      // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n      strokeLinecap: 'butt',\n      // Rotate the trail\n      transform: 'rotate(0.25turn)',\n      transformOrigin: 'center center',\n    },\n    // Customize the text\n    text: {\n      // Text color\n      fill: '#f88',\n      // Text size\n      fontSize: '16px',\n    },\n    // Customize background - only used when the `background` prop is true\n    background: {\n      fill: '#3e98c7',\n    },\n  }}\n/>\n```\n\nHowever, you're not limited to the CSS properties shown above&mdash;you have the full set of SVG CSS properties available to you when you use `prop.styles`.\n\nSee the [CodeSandbox examples](https://codesandbox.io/s/vymm4oln6y) for a live example on how to customize styles.\n\n#### Using CSS\n\nYou can also customize styles with CSS. There are equivalent CSS hooks for the root, path, trail, text, and background of the progressbar.\n\nIf you're importing the default styles, you can override the defaults like this:\n\n```jsx\nimport 'react-circular-progressbar/dist/styles.css';\nimport './custom.css';\n```\n\n```css\n// custom.css\n.CircularProgressbar-path {\n  stroke: red;\n}\n.CircularProgressbar-trail {\n  stroke: gray;\n}\n.CircularProgressbar-text {\n  fill: yellow;\n}\n.CircularProgressbar-background {\n  fill: green;\n}\n```\n\n## Adding arbitrary text or content inside the progressbar\n\nIf you want to add multiple lines of text or images within the progressbar, you can overlay it on top of a regular `<CircularProgressbar />` using absolute positioning. `react-circular-progressbar` ships with a `CircularProgressbarWithChildren` component which makes it easy to do that by using JSX children:\n\n```jsx\nimport { CircularProgressbarWithChildren } from 'react-circular-progressbar';\n\n<CircularProgressbarWithChildren value={66}>\n  {/* Put any JSX content in here that you'd like. It'll be vertically and horizonally centered. */}\n  <img style={{ width: 40, marginTop: -5 }} src=\"https://i.imgur.com/b9NyUGm.png\" alt=\"doge\" />\n  <div style={{ fontSize: 12, marginTop: -5 }}>\n    <strong>66%</strong> mate\n  </div>\n</CircularProgressbarWithChildren>;\n```\n\n<img src=\"/demo/public/images/CircularProgressbarWithChildren.png?raw=true\" alt=\"CircularProgressbarWithChildren example\" />\n\n`CircularProgressbarWithChildren` has all the same props as `CircularProgressbar` - you can use it the exact same way otherwise.\n\n## Animating text\n\nIf you want to animate the text as well as the path, you'll need to transition the `value` prop from one value to another using a third-party animation library like `react-move` and an easing library like `d3-ease`.\n\nYou can use a render prop wrapper like **[AnimatedProgressProvider.js inside this Codesandbox](https://codesandbox.io/s/vymm4oln6y)** to help manage the transitioning value, and use it like this:\n\n```jsx\nimport { easeQuadInOut } from 'd3-ease';\n\n<AnimatedProgressProvider\n  valueStart={0}\n  valueEnd={66}\n  duration={1.4}\n  easingFunction={easeQuadInOut}\n>\n  {(value) => {\n    const roundedValue = Math.round(value);\n    return (\n      <CircularProgressbar\n        value={value}\n        text={`${roundedValue}%`}\n        /* This is important to include, because if you're fully managing the\n        animation yourself, you'll want to disable the CSS animation. */\n        styles={buildStyles({ pathTransition: 'none' })}\n      />\n    );\n  }}\n</AnimatedProgressProvider>;\n```\n\n## Animating progressbar upon component mount or upon visible\n\n**Upon component mount**\n\nIn order to trigger the default CSS animation on mount, you'll need to change `props.value` from 0 to your desired value with a `setTimeout` in `componentDidMount`. You can use a wrapper component to help manage this like [ProgressProvider.js in this Codesandbox](https://codesandbox.io/s/0zk372m7l). Then you can do:\n\n```jsx\n<ProgressProvider valueStart={0} valueEnd={66}>\n  {(value) => <CircularProgressbar value={value} />}\n</ProgressProvider>\n```\n\n**Upon visible**\n\nTo animate the progressbar only when it becomes visible (e.g. if it's below the fold), you can use something like `react-visibility-sensor` which detects whether the component is visible or not. [Here's a Codesandbox example](https://codesandbox.io/s/81wzmm8n00).\n\n## Fixing text centering in Internet Explorer (IE)\n\nBecause the `dominant-baseline` CSS property does not work in IE, the text may not be centered in IE.\n\nThe **recommended way to fix this** is to instead of using `props.text`, use `CircularProgressbarWithChildren` and put your text in `props.children`, [as described here](/README.md#adding-arbitrary-text-or-content-inside-the-progressbar).\n\nHowever, you can also work around this by setting the `text` prop to be a `<tspan>` element and then adjusting the `dy` vertical offset, like so:\n\n```jsx\n// Use feature or browser detection to determine if IE\nconst needDominantBaselineFix = ...\n\n<CircularProgressbar\n  value={percentage}\n  text={<tspan dy={needDominantBaselineFix ? -10 : 0}>{percentage}</tspan>}\n/>\n```\n\n[See this Codesandbox example](https://codesandbox.io/s/x8o1zx7j4) to see this in action.\n\n## Advanced usage\n\n- [Applying a gradient to the progressbar](https://github.com/kevinsqi/react-circular-progressbar/issues/31#issuecomment-338216925)\n- [Creating a dashboard/speedometer style progressbar](https://github.com/kevinsqi/react-circular-progressbar/issues/49)\n\n## Supported platforms\n\nreact-circular-progressbar does not work with React Native, because React Native does not support `<svg>` out of the box.\n\n## Contributing\n\nTake a look at [CONTRIBUTING.md](/CONTRIBUTING.md) to see how to help contribute to react-circular-progressbar.\n\n## License\n\n[MIT](/LICENSE)\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017 Kevin Qi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-circular-progressbar/-/react-circular-progressbar-2.0.3.tgz#fa8eb59f8db168d2904bae4590641792c80f5991",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-circular-progressbar/-/react-circular-progressbar-2.0.3.tgz",
    "hash": "fa8eb59f8db168d2904bae4590641792c80f5991",
    "integrity": "sha512-YKN+xAShXA3gYihevbQZbavfiJxo83Dt1cUxqg/cltj4VVsRQpDr7Fg1mvjDG3x1KHGtd9NmYKvJ2mMrPwbKyw==",
    "registry": "npm",
    "packageName": "react-circular-progressbar",
    "cacheIntegrity": "sha512-YKN+xAShXA3gYihevbQZbavfiJxo83Dt1cUxqg/cltj4VVsRQpDr7Fg1mvjDG3x1KHGtd9NmYKvJ2mMrPwbKyw== sha1-+o61n42xaNKQS65FkGQXksgPWZE="
  },
  "registry": "npm",
  "hash": "fa8eb59f8db168d2904bae4590641792c80f5991"
}