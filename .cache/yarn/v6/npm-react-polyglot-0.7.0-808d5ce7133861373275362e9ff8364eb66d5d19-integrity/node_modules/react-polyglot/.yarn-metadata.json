{
  "manifest": {
    "name": "react-polyglot",
    "version": "0.7.0",
    "description": "Higher order React component for using Polyglot",
    "main": "lib/index.js",
    "files": [
      "lib",
      "src",
      "example"
    ],
    "types": "src/index.d.ts",
    "scripts": {
      "clean": "rimraf lib",
      "build:example": "webpack example/app.js example/dist.js",
      "build:commonjs": "babel src --out-dir lib --ignore '*.test.js'",
      "build": "npm run build:commonjs",
      "prepublish": "npm run clean && npm run build",
      "prettify": "prettier 'src/**/*.js' --write",
      "lint": "eslint src",
      "test": "jest",
      "coverage": "jest --coverage"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/nayaabkhan/react-polyglot.git"
    },
    "keywords": [
      "react",
      "airbnb",
      "polyglot",
      "i18n"
    ],
    "author": {
      "name": "Nayaabkhan Khan",
      "email": "khannayaab@gmail.com",
      "url": "http://nayaabkhan.me"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/nayaabkhan/react-polyglot/issues"
    },
    "homepage": "https://github.com/nayaabkhan/react-polyglot#readme",
    "peerDependencies": {
      "node-polyglot": "^2.0.0",
      "react": ">=16.8.0"
    },
    "devDependencies": {
      "@babel/cli": "^7.7.0",
      "@babel/core": "^7.7.0",
      "@babel/preset-env": "^7.7.1",
      "@babel/preset-react": "^7.7.0",
      "babel-eslint": "^10.0.3",
      "babel-loader": "^8.0.6",
      "eslint": "^6.6.0",
      "eslint-config-prettier": "^6.5.0",
      "eslint-plugin-prettier": "^3.1.1",
      "eslint-plugin-react": "^7.7.0",
      "eslint-plugin-react-hooks": "^2.2.0",
      "jest": "^24.9.0",
      "node-polyglot": "^2.2.2",
      "prettier": "^1.18.2",
      "react": "^16.3.2",
      "react-dom": "^16.3.2",
      "react-test-renderer": "^16.3.2",
      "rimraf": "^2.5.4",
      "webpack": "^4.41.2"
    },
    "dependencies": {
      "hoist-non-react-statics": "^3.3.0",
      "prop-types": "^15.5.8"
    },
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-react-polyglot-0.7.0-808d5ce7133861373275362e9ff8364eb66d5d19-integrity/node_modules/react-polyglot/package.json",
    "readmeFilename": "README.md",
    "readme": "<a href=\"https://codeclimate.com/github/nayaabkhan/react-polyglot/maintainability\"><img src=\"https://api.codeclimate.com/v1/badges/fd8c57e662c5f08ba77e/maintainability\" /></a>\n<a href=\"https://codeclimate.com/github/nayaabkhan/react-polyglot/test_coverage\"><img src=\"https://api.codeclimate.com/v1/badges/fd8c57e662c5f08ba77e/test_coverage\" /></a>\n<a href=\"https://travis-ci.org/nayaabkhan/react-polyglot\"><img src=\"https://travis-ci.org/nayaabkhan/react-polyglot.svg?branch=master\" /></a>\n<a href=\"https://bundlephobia.com/result?p=react-polyglot\"><img src=\"https://badgen.net/bundlephobia/min/react-polyglot\" /></a>\n<a href=\"https://bundlephobia.com/result?p=react-polyglot\"><img src=\"https://badgen.net/bundlephobia/minzip/react-polyglot\" /></a>\n\n# React Polyglot\nProvides higher order component for using Polyglot with React\n\n## Installation\n\n```\nnpm install --save react-polyglot\n```\n\n## Usage\n\n`react-polyglot` exports consists for one wrapper component called `I18n`, one decorator called\n`translate` and one hook called `useTranslate`. The decorator provides a prop `t` which is instance of `Polyglot`.\n\nYou are required to wrap your root component with `I18n` and pass on a `locale` like `en` or `fr`.\nAnd `messages` object containing the strings.\n\n```js\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { I18n } from 'react-polyglot';\nimport App from './components/app';\n\nconst locale = window.locale || 'en';\nconst messages = {\n  \"hello_name\": \"Hello, %{name}.\",\n  \"num_cars\": \"%{smart_count} car |||| %{smart_count} cars\",\n}\n\nrender(\n  <I18n locale={locale} messages={messages}>\n    <App />\n  </I18n>,\n  document.getElementById('app')\n);\n```\n\nThen inside `App` or a child component of `App` you can do:\n\n```js\nimport React from 'react';\nimport { translate } from 'react-polyglot';\n\nconst Greeter = ({ name, t }) => (\n  <h3>{t('hello_name', { name })}</h3>\n);\n\nGreeter.propTypes = {\n  name: React.PropTypes.string.isRequired,\n  t: React.PropTypes.func.isRequired,\n};\n\nexport default translate()(Greeter);\n```\n\n\nor with React Hooks:\n\n```js\nimport React from 'react';\nimport { useTranslate } from 'react-polyglot';\n\nexport default const Greeter = ({ name }) => {\n  const t = useTranslate();\n\n  return (\n    <h3>{t('hello_name', { name })}</h3>\n  );\n};\n\nGreeter.propTypes = {\n  name: React.PropTypes.string.isRequired\n};\n\n```\n\n\n## Live Examples\n\n### Minimal example using class components\n\nhttps://codesandbox.io/s/mq76ojk228\n\n### Advance example with user changeable locales\n\nhttps://codesandbox.io/s/px8n63v0m\n\n\n## How to provide context in your tests\n\nUse a simple helper to wrap your components in a context.\n\n```js\nexport const wrapWithContext = function (component, context, contextTypes) {\n  const wrappedComponent = React.createClass({\n    childContextTypes: contextTypes,\n    getChildContext() {\n      return context;\n    },\n    render() {\n      return component;\n    },\n  });\n  return React.createElement(wrappedComponent);\n}\n```\n\nThen use it inside your tests.\n\n```js\nimport React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport Polyglot from 'node-polyglot';\nimport Greeter from './greeter';\nimport { wrapWithContext } from './helpers';\n\nconst polyglot = new Polyglot({\n  locale: 'en',\n  phrases: {\"hello_name\": \"Hello, %{name}.\"},\n});\n\nconst greeterWithContext = wrapWithContext(\n  <Greeter name=\"Batsy\" />,\n  { t: polyglot.t.bind(polyglot) },\n  { t: React.PropTypes.func }\n);\n\n// use greeterWithContext in your tests\n// here it is shown how to use it with renderToString\nconsole.log(renderToString(greeterWithContext));\n```\n\n\n## Release History\n\nCheck the [Releases](https://github.com/nayaabkhan/react-polyglot/releases) tab. \n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Nayaabkhan Khan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-polyglot/-/react-polyglot-0.7.0.tgz#808d5ce7133861373275362e9ff8364eb66d5d19",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-polyglot/-/react-polyglot-0.7.0.tgz",
    "hash": "808d5ce7133861373275362e9ff8364eb66d5d19",
    "integrity": "sha512-BxwkKyr8bJXOl7H/9LzYc9yHzLxLTv00JTRVbayAsN4cUKKIJA1TTBdpRqkuGrt+nh9AC3h4cDqWx46zuGIcvg==",
    "registry": "npm",
    "packageName": "react-polyglot",
    "cacheIntegrity": "sha512-BxwkKyr8bJXOl7H/9LzYc9yHzLxLTv00JTRVbayAsN4cUKKIJA1TTBdpRqkuGrt+nh9AC3h4cDqWx46zuGIcvg== sha1-gI1c5xM4YTcydTYun/g2TrZtXRk="
  },
  "registry": "npm",
  "hash": "808d5ce7133861373275362e9ff8364eb66d5d19"
}