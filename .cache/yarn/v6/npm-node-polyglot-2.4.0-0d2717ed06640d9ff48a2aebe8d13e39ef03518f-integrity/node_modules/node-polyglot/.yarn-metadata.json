{
  "manifest": {
    "name": "node-polyglot",
    "version": "2.4.0",
    "description": "Give your JavaScript the ability to speak many languages.",
    "main": "index.js",
    "scripts": {
      "prepublish": "safe-publish-latest",
      "pretest": "npm run --silent lint",
      "test": "npm run --silent tests-only",
      "tests-only": "mocha test/*.js --reporter spec",
      "lint": "eslint *.js test/*.js",
      "docs": "docco -o docs/ index.js"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/airbnb/polyglot.js.git"
    },
    "keywords": [
      "i18n",
      "internationalization",
      "internationalisation",
      "translation",
      "interpolation",
      "translate",
      "polyglot"
    ],
    "author": {
      "name": "Spike Brehm",
      "email": "spike@airbnb.com"
    },
    "dependencies": {
      "for-each": "^0.3.3",
      "has": "^1.0.3",
      "string.prototype.trim": "^1.1.2",
      "warning": "^4.0.3"
    },
    "devDependencies": {
      "chai": "^4.2.0",
      "docco": "^0.7.0",
      "eslint": "^5.16.0",
      "eslint-config-airbnb-base": "^13.1.0",
      "eslint-plugin-import": "^2.17.3",
      "mocha": "^3.5.3",
      "safe-publish-latest": "^1.1.2",
      "uglify-js": "^2.7.3"
    },
    "license": "BSD-2-Clause",
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-node-polyglot-2.4.0-0d2717ed06640d9ff48a2aebe8d13e39ef03518f-integrity/node_modules/node-polyglot/package.json",
    "readmeFilename": "README.md",
    "readme": "Polyglot.js\n===========\n\n[![Build Status][travis-image]][travis-url]\n\n[![Join the chat at https://gitter.im/airbnb/polyglot.js](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/airbnb/polyglot.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nPolyglot.js is a tiny I18n helper library written in JavaScript, made to work both in the browser and in CommonJS environments (Node). It provides a simple solution for interpolation and pluralization, based off of Airbnb’s experience adding I18n functionality to its Backbone.js and Node apps. \n\nI18n is incredibly important for us at [Airbnb](https://www.airbnb.com/), as we have listings in 192 countries, and we translate our site into 30-odd different languages.\nWe’re also [hiring talented engineers](https://www.airbnb.com/jobs/departments/engineering) to help us scale up to meet the challenges of buliding a global marketplace.\n\nView the [documentation on Github](https://github.com/airbnb/polyglot.js).\n\nView the [annotated source](http://airbnb.github.com/polyglot.js/polyglot.html).\n\nPolylglot is agnostic to your translation backend. It doesn’t perform any translation; it simply gives you a way to manage translated phrases from your client- or server-side JavaScript application.\n\n## Installation\n\ninstall with [npm](https://npmjs.org):\n\n    $ npm install node-polyglot\n\n### Running the tests\n\nClone the repo, run `npm install`, and `npm test`.\n\n## Usage\n\n### Instantiation\n\nFirst, create an instance of the `Polyglot` class, which you will use for translation.\n\n```js\nvar polyglot = new Polyglot();\n```\n\nPolyglot is class-based so you can maintain different sets of phrases at the same time, possibly in different locales. This is very useful for example when serving requests with [Express](http://expressjs.com), because each request may have a different locale, and you don’t want concurrent requests to clobber each other’s phrases.\n\nSee [Options Overview](#options-overview) for information about the options object you can choose to pass to `new Polyglot`.\n\n### Translation\n\nTell Polyglot what to say by simply giving it a phrases object,\nwhere the key is the canonical name of the phrase and the value is\nthe already-translated string.\n\n```js\npolyglot.extend({\n  \"hello\": \"Hello\"\n});\n\npolyglot.t(\"hello\");\n=> \"Hello\"\n```\n\nYou can also pass a mapping at instantiation, using the key `phrases`:\n\n```js\nvar polyglot = new Polyglot({phrases: {\"hello\": \"Hello\"}});\n```\n\nPolyglot doesn’t do the translation for you. It’s up to you to give it\nthe proper phrases for the user’s locale.\n\nA common pattern is to gather a hash of phrases in your backend, and output\nthem in a `<script>` tag at the bottom of the document. For example, in Rails:\n\n`app/controllers/home_controller.rb`\n\n```ruby\ndef index\n  @phrases = {\n    \"home.login\" => I18n.t(\"home.login\"),\n    \"home.signup\" => I18n.t(\"home.signup\"),\n    ...\n  }\nend\n```\n\n`app/views/home/index.html.erb`\n\n```html\n<script>\n  var polyglot = new Polyglot({phrases: <%= raw @phrases.to_json %>});\n</script>\n```\n\nAnd now you can utilize i.e. `polyglot.t(\"home.login\")` in your JavaScript application\nor Handlebars templates.\n\n### Interpolation\n\n`Polyglot.t()` also provides interpolation. Pass an object with key-value pairs of\ninterpolation arguments as the second parameter.\n\n```js\npolyglot.extend({\n  \"hello_name\": \"Hola, %{name}.\"\n});\n\npolyglot.t(\"hello_name\", {name: \"DeNiro\"});\n=> \"Hola, DeNiro.\"\n```\n\nPolyglot also supports nested phrase objects.\n\n```js\npolyglot.extend({\n  \"nav\": {\n    \"hello\": \"Hello\",\n    \"hello_name\": \"Hello, %{name}\",\n    \"sidebar\": {\n      \"welcome\": \"Welcome\"\n    }\n  }\n});\n\npolyglot.t(\"nav.sidebar.welcome\");\n=> \"Welcome\"\n```\n\nThe substitution variable syntax is customizable.\n\n```js\nvar polyglot = new Polyglot({\n  phrases: {\n    \"hello_name\": \"Hola {{name}}\"\n  },\n  interpolation: {prefix: '{{', suffix: '}}'}\n});\n\npolyglot.t(\"hello_name\", {name: \"DeNiro\"});\n=> \"Hola, DeNiro.\"\n```\n\n### Pluralization\n\nFor pluralization to work properly, you need to tell Polyglot what the current locale is. You can use `polyglot.locale(\"fr\")` to set the locale to, for example, French. This method is also a getter:\n\n```js\npolyglot.locale()\n=> \"fr\"\n```\n\nYou can also pass this in during instantiation.\n\n```js\nvar polyglot = new Polyglot({locale: \"fr\"});\n```\n\nCurrently, the _only_ thing that Polyglot uses this locale setting for is pluralization.\n\nPolyglot provides a very basic pattern for providing pluralization based on a single string that contains all plural forms for a given phrase. Because various languages have different nominal forms for zero, one, and multiple, and because the noun can be before or after the count, we have to be overly explicit about the possible phrases.\n\nTo get a pluralized phrase, still use `polyglot.t()` but use a specially-formatted phrase string that separates the plural forms by the delimiter `||||`, or four vertical pipe characters.\n\nFor pluralizing \"car\" in English, Polyglot assumes you have a phrase of the form:\n\n```js\npolyglot.extend({\n  \"num_cars\": \"%{smart_count} car |||| %{smart_count} cars\",\n});\n```\n\nIn English (and German, Spanish, Italian, and a few others) there are only two plural forms: singular and not-singular.\n\nSome languages get a bit more complicated. In Czech, there are three separate forms: 1, 2 through 4, and 5 and up. Russian is even more involved.\n\n```js\nvar polyglot = new Polyglot({locale: \"cs\"}); // Czech\npolyglot.extend({\n  \"num_foxes\": \"Mám %{smart_count} lišku |||| Mám %{smart_count} lišky |||| Mám %{smart_count} lišek\"\n})\n```\n\n`polyglot.t()` will choose the appropriate phrase based on the provided `smart_count` option, whose value is a number.\n\n```js\npolyglot.t(\"num_cars\", {smart_count: 0});\n=> \"0 cars\"\n\npolyglot.t(\"num_cars\", {smart_count: 1});\n=> \"1 car\"\n\npolyglot.t(\"num_cars\", {smart_count: 2});\n=> \"2 cars\"\n```\n\nAs a shortcut, you can also pass a number to the second parameter:\n\n```js\npolyglot.t(\"num_cars\", 2);\n=> \"2 cars\"\n```\n\n#### Custom Pluralization Rules\n\nPolyglot provides some default pluralization rules for some locales. You can specify a different set of rules through the `pluralRules` constructor param.\n\n```js\nvar polyglot = new Polyglot({\n  pluralRules: {\n    pluralTypes: {\n      germanLike: function (n) {\n        // is 1\n        if (n === 1) {\n          return 0;\n        }\n        // everything else\n        return 1;\n      },\n      frenchLike: function (n) {\n        // is 0 or 1\n        if (n <= 1) {\n          return 0;\n        }\n        // everything else\n        return 1;\n      }\n    },\n    pluralTypeToLanguages: {\n      germanLike: ['de', 'en', 'xh', 'zu'],\n      frenchLike: ['fr', 'hy']\n    }\n  }\n});\n```\n\nThis can be useful to support locales that polyglot does not support by default or to change the rule definitions.\n\n## Public Instance Methods\n\n### Polyglot.prototype.t(key, interpolationOptions)\n\nThe most-used method. Provide a key, and `t()` will return the phrase.\n\n```\npolyglot.t(\"hello\");\n=> \"Hello\"\n```\n\nThe phrase value is provided first by a call to `polyglot.extend()` or `polyglot.replace()`.\n\nPass in an object as the second argument to perform interpolation.\n\n```\npolyglot.t(\"hello_name\", {name: \"Spike\"});\n=> \"Hello, Spike\"\n```\n\nPass a number as the second argument as a shortcut to `smart_count`:\n\n```js\n// same as: polyglot.t(\"car\", {smart_count: 2});\npolyglot.t(\"car\", 2);\n=> \"2 cars\"\n```\n\nIf you like, you can provide a default value in case the phrase is missing.\nUse the special option key \"_\" to specify a default.\n\n```js\npolyglot.t(\"i_like_to_write_in_language\", {\n  _: \"I like to write in %{language}.\",\n  language: \"JavaScript\"\n});\n=> \"I like to write in JavaScript.\"\n```\n\n### Polyglot.prototype.extend(phrases)\n\nUse `extend` to tell Polyglot how to translate a given key.\n\n```js\npolyglot.extend({\n  \"hello\": \"Hello\",\n  \"hello_name\": \"Hello, %{name}\"\n});\n```\n\nThe key can be any string. Feel free to call `extend` multiple times; it will override any phrases with the same key, but leave existing phrases untouched.\n\n### Polyglot.prototype.unset(keyOrObject)\nUse `unset` to selectively remove keys from a polyglot instance.\n`unset` accepts one argument: either a single string key, or an object whose keys are string keys, and whose values are ignored unless they are nested objects (in the same format).\n\nExample:\n```js\npolyglot.unset('some_key');\npolyglot.unset({\n  hello: 'Hello',\n  hello_name: 'Hello, %{name}',\n  foo: {\n    bar: 'This phrase’s key is \"foo.bar\"'\n  }\n});\n```\n\n### Polyglot.prototype.locale([localeToSet])\n\nGet or set the locale (also can be set using the [constructor option](#options-overview), which is used only for pluralization.\nIf a truthy value is provided, it will set the locale. Afterwards, it will return it.\n\n### Polyglot.prototype.clear()\n\nClears all phrases. Useful for special cases, such as freeing up memory if you have lots of phrases but no longer need to perform any translation. Also used internally by `replace`.\n\n\n### Polyglot.prototype.replace(phrases)\n\nCompletely replace the existing phrases with a new set of phrases.\nNormally, just use `extend` to add more phrases, but under certain circumstances, you may want to make sure no old phrases are lying around.\n\n### Polyglot.prototype.has(key)\n\nReturns `true` if the key does exist in the provided phrases, otherwise it will return `false`.\n\n## Public Static Methods\n\n### transformPhrase(phrase[, substitutions[, locale]])\n\nTakes a phrase string and transforms it by choosing the correct plural form and interpolating it. This method is used internally by [t](#polyglotprototypetkey-interpolationoptions).\nThe correct plural form is selected if substitutions.smart_count is set.\nYou can pass in a number instead of an Object as `substitutions` as a shortcut for `smart_count`.\nYou should pass in a third argument, the locale, to specify the correct plural type. It defaults to `'en'` which has 2 plural forms.\n\n## Options Overview\n`new Polyglot` accepts a number of options:\n\n - `phrases`: a key/value map of translated phrases. See [Translation](https://github.com/airbnb/polyglot.js#translation).\n - `locale`: a string describing the locale (language and region) of the translation, to apply pluralization rules. see [Pluralization](#pluralization)\n - `allowMissing`: a boolean to control whether missing keys in a `t` call are allowed. If `false`, by default, a missing key is returned and a warning is issued.\n - `onMissingKey`: if `allowMissing` is `true`, and this option is a function, then it will be called instead of the default functionality. Arguments passed to it are `key`, `options`, and `locale`. The return of this function will be used as a translation fallback when `polyglot.t('missing.key')` is called (hint: return the key).\n - `interpolation`: an object to change the substitution syntax for interpolation by setting the `prefix` and `suffix` fields.\n - `pluralRules`: an object of `pluralTypes` and `pluralTypeToLanguages` to control pluralization logic.\n\n\n## [History](CHANGELOG.md)\n\n[travis-image]: https://travis-ci.org/airbnb/polyglot.js.svg\n[travis-url]: https://travis-ci.org/airbnb/polyglot.js\n\n## Related projects\n\n- [i18n-extract](https://github.com/oliviertassinari/i18n-extract): Manage localization with static analysis. (E.g. key usage extraction)\n",
    "licenseText": "BSD 2-Clause License\n\nCopyright (c) 2012, Airbnb\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/node-polyglot/-/node-polyglot-2.4.0.tgz#0d2717ed06640d9ff48a2aebe8d13e39ef03518f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/node-polyglot/-/node-polyglot-2.4.0.tgz",
    "hash": "0d2717ed06640d9ff48a2aebe8d13e39ef03518f",
    "integrity": "sha512-KRzKwzMWm3wSAjOSop7/WwNyzaMkCe9ddkwXTQsIZEJmvEnqy/bCqLpAVw6xBszKfy4iLdYVA0d83L+cIkYPbA==",
    "registry": "npm",
    "packageName": "node-polyglot",
    "cacheIntegrity": "sha512-KRzKwzMWm3wSAjOSop7/WwNyzaMkCe9ddkwXTQsIZEJmvEnqy/bCqLpAVw6xBszKfy4iLdYVA0d83L+cIkYPbA== sha1-DScX7QZkDZ/0iirr6NE+Oe8DUY8="
  },
  "registry": "npm",
  "hash": "0d2717ed06640d9ff48a2aebe8d13e39ef03518f"
}