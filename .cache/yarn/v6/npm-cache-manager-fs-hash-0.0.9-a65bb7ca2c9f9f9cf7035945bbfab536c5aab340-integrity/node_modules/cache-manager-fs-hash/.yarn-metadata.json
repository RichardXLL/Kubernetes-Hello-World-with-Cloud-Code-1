{
  "manifest": {
    "name": "cache-manager-fs-hash",
    "version": "0.0.9",
    "main": "index.js",
    "engines": {
      "node": ">=8.0.0"
    },
    "description": "file system store for node cache manager",
    "author": {
      "name": "Roland Starke"
    },
    "license": "MIT",
    "files": [
      "index.js",
      "src/*"
    ],
    "keywords": [
      "cache-manager",
      "storage",
      "filesystem"
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/rolandstarke/node-cache-manager-fs-hash.git"
    },
    "bugs": {
      "url": "https://github.com/rolandstarke/node-cache-manager-fs-hash/issues"
    },
    "scripts": {
      "test": "mocha ./test/**/*.js"
    },
    "devDependencies": {
      "cache-manager": "^3.2.1",
      "mocha": "^7.1.1",
      "rimraf": "^3.0.2"
    },
    "dependencies": {
      "lockfile": "^1.0.4"
    },
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-cache-manager-fs-hash-0.0.9-a65bb7ca2c9f9f9cf7035945bbfab536c5aab340-integrity/node_modules/cache-manager-fs-hash/package.json",
    "readmeFilename": "README.md",
    "readme": "# Node Cache Manager store for Filesystem\n\n[![Build Status](https://travis-ci.org/rolandstarke/node-cache-manager-fs-hash.svg?branch=master)](https://travis-ci.org/rolandstarke/node-cache-manager-fs-hash)\n[![dependencies Status](https://david-dm.org/rolandstarke/node-cache-manager-fs-hash/status.svg)](https://david-dm.org/rolandstarke/node-cache-manager-fs-hash)\n[![npm package](https://img.shields.io/npm/v/cache-manager-fs-hash.svg)](https://www.npmjs.com/package/cache-manager-fs-hash)\n[![node](https://img.shields.io/node/v/cache-manager-fs-hash.svg)](https://nodejs.org)\n\nA Filesystem store for the [node-cache-manager](https://github.com/BryanDonovan/node-cache-manager) module\n\n## Installation\n\n```sh\nnpm install cache-manager-fs-hash --save\n```\n\n## Features\n\n* Saves anything that is `JSON.stringify`-able to disk\n* Buffers are saved as well (if they reach a certain size they will be stored to separate files)\n* Works well with the cluster module\n\n## Usage example\n\nHere is an example that demonstrates how to implement the Filesystem cache store.\n\n```javascript\nconst cacheManager = require('cache-manager');\nconst fsStore = require('cache-manager-fs-hash');\n\nconst diskCache = cacheManager.caching({\n    store: fsStore,\n    options: {\n        path: 'diskcache', //path for cached files\n        ttl: 60 * 60,      //time to life in seconds\n        subdirs: true,     //create subdirectories to reduce the\n                           //files in a single dir (default: false)\n        zip: true,         //zip files to save diskspace (default: false)\n    }\n});\n\n\n(async () => {\n\n    await diskCache.set('key', 'value');\n    console.log(await diskCache.get('key')); //\"value\"\n    await diskCache.del('key');\n    console.log(await diskCache.get('key')); //undefined\n\n\n    console.log(await getUserCached(5)); //{id: 5, name: '...'}\n    console.log(await getUserCached(5)); //{id: 5, name: '...'}\n\n    await diskCache.reset();\n\n    function getUserCached(userId) {\n        return diskCache.wrap(userId /* cache key */, function () {\n            return getUser(userId);\n        });\n    }\n\n    async function getUser(userId) {\n        return {id: userId, name: '...'};\n    }\n\n})();\n```\n\n## How it works\n\nThe filename is determined by the md5 hash of the `key`. (The `key` is also saved in the file to detect hash collisions. In this case it will just return a cache miss). Writing is performed with .lock files so that multiple instances of the library (e.g. using the cluster module) do not interfere with one another.\n\n## Tests\n\n```sh\nnpm test\n```\n\n## License\n\ncache-manager-fs-hash is licensed under the MIT license.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2017 Roland Starke\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/cache-manager-fs-hash/-/cache-manager-fs-hash-0.0.9.tgz#a65bb7ca2c9f9f9cf7035945bbfab536c5aab340",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/cache-manager-fs-hash/-/cache-manager-fs-hash-0.0.9.tgz",
    "hash": "a65bb7ca2c9f9f9cf7035945bbfab536c5aab340",
    "integrity": "sha512-G0RUUSMZADiMx/0tHjPa+uzJyjtVB/Xt9yuFm6g/rBpm0p/IMr4atUWX2G2f1yGCPmDnyUcFz4RlSpgNRgvldg==",
    "registry": "npm",
    "packageName": "cache-manager-fs-hash",
    "cacheIntegrity": "sha512-G0RUUSMZADiMx/0tHjPa+uzJyjtVB/Xt9yuFm6g/rBpm0p/IMr4atUWX2G2f1yGCPmDnyUcFz4RlSpgNRgvldg== sha1-plu3yiyfn5z3A1lFu/q1NsWqs0A="
  },
  "registry": "npm",
  "hash": "a65bb7ca2c9f9f9cf7035945bbfab536c5aab340"
}