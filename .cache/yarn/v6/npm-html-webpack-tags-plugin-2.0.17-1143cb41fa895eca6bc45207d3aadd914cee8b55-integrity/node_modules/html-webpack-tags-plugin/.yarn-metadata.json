{
  "manifest": {
    "name": "html-webpack-tags-plugin",
    "version": "2.0.17",
    "description": "lets you define html tags to inject with html-webpack-plugin",
    "main": "index.js",
    "types": "typings.d.ts",
    "engines": {
      "node": ">=8"
    },
    "files": [
      "index.js",
      "typings.d.ts"
    ],
    "scripts": {
      "prepublish": "npm run test",
      "pretest": "semistandard",
      "test": "jasmine",
      "debug": "node-debug jasmine"
    },
    "semistandard": {
      "ignore": [
        "spec/**/*-bundle.js",
        "spec/dist/**"
      ]
    },
    "unmockedModulePathPatterns": [
      "jasmine-expect"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/jharris4/html-webpack-tags-plugin.git"
    },
    "keywords": [
      "webpack",
      "plugin",
      "html-webpack-plugin",
      "html",
      "tags",
      "inject",
      "include",
      "assets"
    ],
    "author": {
      "name": "Jon Harris",
      "email": "harris.jb@gmail.com",
      "url": "https://github.com/jharris4"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/jharris4/html-webpack-tags-plugin/issues"
    },
    "homepage": "https://github.com/jharris4/html-webpack-tags-plugin",
    "devDependencies": {
      "cheerio": "^1.0.0-rc.3",
      "copy-webpack-plugin": "^5.0.4",
      "css-loader": "^3.2.0",
      "express": "^4.17.1",
      "html-webpack-plugin": "^3.2.0",
      "html-webpack-plugin-4": "npm:html-webpack-plugin@4.0.0-beta.8",
      "jasmine": "^3.5.0",
      "jasmine-expect": "^4.0.3",
      "mini-css-extract-plugin": "^0.8.0",
      "puppeteer": "1.20.0",
      "rimraf": "^3.0.0",
      "semistandard": "^14.2.0",
      "style-loader": "^1.0.0",
      "webpack": "^4.40.2"
    },
    "dependencies": {
      "glob": "^7.1.4",
      "minimatch": "^3.0.4",
      "slash": "^3.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-html-webpack-tags-plugin-2.0.17-1143cb41fa895eca6bc45207d3aadd914cee8b55-integrity/node_modules/html-webpack-tags-plugin/package.json",
    "readmeFilename": "README.V1.md",
    "readme": "Include Assets extension for the HTML Webpack Plugin\n========================================\n[![npm version](https://badge.fury.io/js/html-webpack-include-assets-plugin.svg)](https://badge.fury.io/js/html-webpack-include-assets-plugin) [![Build Status](https://travis-ci.org/jharris4/html-webpack-include-assets-plugin.svg?branch=master)](https://travis-ci.org/jharris4/html-webpack-include-assets-plugin) [![js-semistandard-style](https://img.shields.io/badge/code%20style-semistandard-brightgreen.svg?style=flat-square)](https://github.com/Flet/semistandard)\n\nThis is the `README.md` from **version 1.x** which provides support for ** Node < 8.6 **.\n\nThis **version is deprecated** in favour of [https://github.com/jharris4/html-webpack-include-assets-plugin](html-webpack-include-assets-plugin version 2).\n\nEnhances [html-webpack-plugin](https://github.com/ampedandwired/html-webpack-plugin)\nfunctionality by allowing you to specify js or css assets to be included.\n\nWhen using a plugin such as [copy-webpack-plugin](https://github.com/webpack-contrib/copy-webpack-plugin) you may have assets output to your build directory that are not detected/output by the html-webpack-plugin.\n\nThis plugin allows you to force some of these assets to be included in the output from html-webpack-plugin.\n\nInstallation\n------------\nYou must be running webpack on node 8.x or higher\n\nInstall the plugin with npm:\n```shell\n$ npm install --save-dev html-webpack-include-assets-plugin\n```\n\n\nBasic Usage\n-----------\nRequire the plugin in your webpack config:\n\n```javascript\nvar HtmlWebpackIncludeAssetsPlugin = require('html-webpack-include-assets-plugin');\n```\n\nAdd the plugin to your webpack config:\n\n```javascript\noutput: {\n  publicPath: '/abc/'\n},\nplugins: [\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({ assets: ['a.js', 'b.css'], append: true })\n]\n```\n\nWhich will generate html like this:\n\n```html\n<head>\n  <!-- other head content -->\n  <link rel=\"stylesheet\" href=\"/abc/b.css\"/>\n</head>\n<body>\n  <!-- other body content -->\n  <script type=\"text/javascript\" src=\"/abc/a.js\"></script>\n</body>\n```\n\n\nOptions\n-------\nThe available options are:\n\n- `jsExtensions`: `string` or `array`\n\n  Specifies the file extensions to use to determine if assets are script assets. Default is `['.js']`.\n\n- `cssExtensions`: `string` or `array`\n\n  Specifies the file extensions to use to determine if assets are style assets. Default is `['.css']`.\n\n- `assets`: `string` or `array` or `object`\n\n  Assets that will be output into your html-webpack-plugin template.\n\n  To specify just one asset, simply pass a string or object. To specify multiple, pass an array of strings or objects.\n\n  If the asset path is static and ends in one of the `jsExtensions` or `cssExtensions` values, simply use a string value.\n\n  If the asset is not static or does not have a valid extension, you can instead pass an object with properties `path` (required) and `type` or `glob` or `globPath` or `attributes` (optional). In this case `path` is the asset href/src, `type` is one of `js` or `css`, and `glob` is a wildcard to use to match all files in the path (uses the [glob](https://github.com/isaacs/node-glob) package). The `globPath` can be used to specify the directory from which the `glob` should search for filename matches (the default is to use `path` within webpack's output directory).\n\n  The `attributes` property may be used to add additional attributes to the link or script element that is injected. The keys of this object are attribute names and the values are the attribute values (string or boolean key values are allowed).\n\n  The `assetPath` property may be used to specify the full path to the included asset. This can be useful as it will trigger a recompilation after the assets have changed when using `webpack-dev-server` or `webpack-dev-middleware` in development mode.\n\n- `append`: `boolean`\n\n  Specifying whether the assets should be prepended (`false`) before any existing assets, or appended (`true`) after them.\n\n- `resolvePaths`: `boolean`\n\n  Specifying whether the asset paths should be resolved with `path.resolve` (i.e. made absolute).\n\n- `publicPath`: `boolean` or `string`\n\n  Specifying whether the assets should be prepended with webpack's public path or a custom publicPath (`string`).\n\n  A value of `false` may be used to disable prefixing with webpack's publicPath, or a value like `myPublicPath/` may be used to prefix all assets with the given string. Default is `true`.\n\n- `hash`: `boolean` or `function(assetName, hash)`\n\n  Specifying whether the assets should be appended with webpack's compilation hash. This is useful for cache busting. Default is `false`.\n\n- `files`: `string` or `array`\n\n  Files that the assets will be added to.\n\n  By default the assets will be included in all files. If files are defined, the assets will only be included in specified file globs (uses the [minimatch](https://github.com/isaacs/minimatch) package).\n\n  - `cssAssets`: `array`\n\n  Optional shortcut for adding css assets. An array of css asset objects.\n\n  See the cssAssets example below for the syntax of css asset object.\n\n\nExample\n-------\n\n_____\n\nUsing `HtmlWebpackIncludeAssetsPlugin` and `CopyWebpackPlugin` to include assets to `html-webpack-plugin` template :\n\n```javascript\nplugins: [\n  new CopyWebpackPlugin([\n    { from: 'node_modules/bootstrap/dist/css', to: 'css/'},\n    { from: 'node_modules/bootstrap/dist/fonts', to: 'fonts/'}\n  ]),\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: ['css/bootstrap.min.css', 'css/bootstrap-theme.min.css'],\n    append: false\n  })\n]\n```\n\n_____\n\nAppending and prepending at the same time :\n\n```javascript\nplugins: [\n  new CopyWebpackPlugin([\n    { from: 'node_modules/bootstrap/dist/css', to: 'css/'},\n    { from: 'node_modules/bootstrap/dist/fonts', to: 'fonts/'}\n  ]),\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: ['css/bootstrap.min.css', 'css/bootstrap-theme.min.css'],\n    append: false\n  }),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: ['css/custom.css'],\n    append: true\n  })\n]\n```\n\n_____\n\nUsing custom `jsExtensions` :\n\n```javascript\nplugins: [\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: ['dist/output.js', 'lib/content.jsx'],\n    append: false,\n    jsExtensions: ['.js', '.jsx']\n  })\n]\n```\n\n_____\n\nUsing custom `publicPath` :\n\n```javascript\nplugins: [\n  new CopyWebpackPlugin([\n    { from: 'node_modules/bootstrap/dist/css', to: 'css/'},\n    { from: 'node_modules/bootstrap/dist/fonts', to: 'fonts/'}\n  ]),\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: ['css/bootstrap.min.css', 'css/bootstrap-theme.min.css'],\n    append: false,\n    publicPath: 'myPublicPath/'\n  })\n]\n```\n\n_____\n\nOr to include assets without prepending the `publicPath`:\n\n```javascript\nplugins: [\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: ['css/no-public-path.min.css', 'http://some.domain.com.js'],\n    append: false,\n    publicPath: false\n  })\n]\n```\n\n_____\n\nManually specifying asset types :\n\n```javascript\nplugins: [\n  new CopyWebpackPlugin([\n    { from: 'node_modules/bootstrap/dist/css', to: 'css/'},\n    { from: 'node_modules/bootstrap/dist/fonts', to: 'fonts/'}\n  ]),\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: [\n      '/css/bootstrap.min.css',\n      '/css/bootstrap-theme.min.css',\n      { path: 'https://fonts.googleapis.com/css?family=Material+Icons', type: 'css' }\n    ],\n    append: false,\n    publicPath: ''\n  })\n]\n```\n\n_____\n\nAdding custom attributes to asset tags :\n\nThe bootstrap-theme link tag will be given an id=\"bootstrapTheme\" attribute.\n\n```javascript\nplugins: [\n  new CopyWebpackPlugin([\n    { from: 'node_modules/bootstrap/dist/css', to: 'css/'},\n    { from: 'node_modules/bootstrap/dist/fonts', to: 'fonts/'}\n  ]),\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: [\n      '/css/bootstrap.min.css',\n      { path: '/css/bootstrap-theme.min.css', attributes: { id: 'bootstrapTheme' } }\n    ],\n    append: false,\n    publicPath: ''\n  })\n]\n```\n\n_____\n\nUsing `hash` option :\n\nWhen the hash option is set to `true`, asset paths will be appended with a hash query parameter (`?hash=<the_hash>`)\n\n```javascript\nplugins: [\n  new CopyWebpackPlugin([\n    { from: 'node_modules/bootstrap/dist/css', to: 'css/'},\n    { from: 'node_modules/bootstrap/dist/fonts', to: 'fonts/'}\n  ]),\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: ['css/bootstrap.min.css', 'css/bootstrap-theme.min.css'],\n    append: false,\n    hash: true\n  })\n]\n```\n\n_____\n\nWhen the hash option is set to a `function`, asset paths will be replaced with the result of executing that function\n\n```javascript\nplugins: [\n  new CopyWebpackPlugin([\n    { from: 'somepath/somejsfile.js', to: 'js/somejsfile.[hash].js' },\n    { from: 'somepath/somecssfile.css', to: 'css/somecssfile.[hash].css' }\n  ]),\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: [{ path: 'js', glob: '*.js', globPath: 'somepath' }],\n    assets: [{ path: 'css', glob: '*.css', globPath: 'somepath' }],\n    append: false,\n    hash: function(assetName, hash) {\n      assetName = assetName.replace(/\\.js$/, '.' + hash + '.js');\n      assetName = assetName.replace(/\\.css$/, '.' + hash + '.css');\n      return assetName;\n    }\n  })\n]\n```\n\n_____\n\nSpecifying specific `files`\n\n```javascript\nplugins: [\n  new CopyWebpackPlugin([\n    { from: 'node_modules/bootstrap/dist/css', to: 'css/'},\n    { from: 'node_modules/bootstrap/dist/fonts', to: 'fonts/'}\n  ]),\n  new HtmlWebpackPlugin({\n    filename: 'a/index.html'\n  }),\n  new HtmlWebpackPlugin({\n    filename: 'b/index.html'\n  }),\n  new HtmlWebpackIncludeAssetsPlugin({\n    files: ['a/**/*.html'],\n    assets: ['css/a.css'],\n    append: true\n  }),\n  new HtmlWebpackIncludeAssetsPlugin({\n    files: ['b/**/*.html'],\n    assets: ['css/b.css'],\n    append: true\n  })\n]\n```\n\n_____\n\nSpecifying assets usings a `glob`\n\nNote that since `copy-webpack-plugin` does not actually copy the files to webpack's output directory until *after* `html-webpack-plugin` has completed, it is necessary to use the `globPath` to retrieve filename matches relative to the original location of any such files.\n\n```javascript\nplugins: [\n  new CopyWebpackPlugin([\n    { from: 'node_modules/bootstrap/dist/css', to: 'css/'},\n    { from: 'node_modules/bootstrap/dist/fonts', to: 'fonts/'}\n  ]),\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: [{ path: 'css', glob: '*.css', globPath: 'node_modules/bootstrap/dist/css/' }],\n    append: true\n  })\n]\n```\n\n_____\n\nSpecifying `cssAssets` (a shortcut for specifying assets of type css)\n\n```javascript\noutput: {\n  publicPath: '/my-public-path/'\n},\nplugins: [\n  new CopyWebpackPlugin([\n    { from: 'node_modules/bootstrap/dist/css', to: 'css/'},\n    { from: 'node_modules/bootstrap/dist/fonts', to: 'fonts/'}\n  ]),\n  new HtmlWebpackPlugin(),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: [],\n    append: true,\n    cssAssets: [\n      {\n        href: 'asset/path',\n        attributes: {\n          rel: 'icon'\n        }\n      },\n      {\n        href: '/absolute/asset/path',\n        asset: false,\n        attributes: {\n          rel: 'manifest'\n        }\n      }\n    ]\n  })\n]\n```\n\nWill append the following link elements into the index template html\n\n```html\n<head>\n  <!-- previous header content -->\n  <link rel=\"icon\" href=\"/my-public-path/asset/path\"/>\n  <link rel=\"manifest\" href=\"/absolute/asset/path\"/>\n</head>\n```\n\nNote that the second cssAsset's href was not prefixed with the webpack `publicPath` because `csAsset.asset` was set to `false`.\n\n_____\n\n\nCaveats\n-------\n\nSome users have encountered issues with plugin ordering.\n\n- It is advisable to always place any `HtmlWebpackPlugin` plugins **before** any `HtmlWebpackIncludeAssetsPlugin` plugins in your webpack config.\n\nThis plugin has only been tested with **two instances** in one webpack config, where one had `option.append: false` and the other had `option.append: true`.\n\n- It is **not recommended to use more than one instance of this plugin** in one webpack config unless using the above configuration.\n\nChanging `HtmlWebpackPlugin.options.inject` from its **default value** may cause **issues**.\n\n- This plugin **requires** `HtmlWebpackPlugin.options.inject` to be `true` (it defaults to true if undefined) for attribute injection to work.\n\n\nIf you setup your webpack config to have `HtmlWebpackPlugin.options.inject: false` like this:\n\n```javascript\noutput: {\n  publicPath: '/the-public-path/'\n},\nplugins: [\n  new HtmlWebpackPlugin({ inject: false }),\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: [{ path: 'css/bootstrap-theme.min.css', attributes: { id: 'bootstrapTheme' } }],\n    links: [{ href: 'the-ref', attributes: { rel: 'icon' } }],\n    append: true\n  })\n]\n```\n\nYou will need to add the following to your *template* `index.html` to get assets to be **generated**:\n\n```html\n<head>\n  <!-- other head content -->\n  <% for (var cssIndex = 0; cssIndex < htmlWebpackPlugin.files.css.length; cssIndex++) { %>\n    <link rel=\"stylesheet\" href=\"<%= htmlWebpackPlugin.files.css[cssIndex] %>\">\n  <% } %>\n</head>\n<body>\n  <!-- other body content -->\n  <% for (var jsIndex = 0; jsIndex < htmlWebpackPlugin.files.js.length; jsIndex++) { %>\n    <script src=\"<%= htmlWebpackPlugin.files.js[jsIndex] %>\"></script>\n  <% } %>\n</body>\n```\n\nUsing the (lodash) `template syntax` like this for css and js files is necessary when you turn injection off.\n\nBut, the `template syntax` does not allow injection of more than `one attribute value`.\n\nThis means it will **generate** an `index.html` that looks like this:\n\n```html\n<head>\n  <link rel=\"stylesheet\" href=\"/the-public-path/css/bootstrap-theme.min.css\">\n  <link rel=\"stylesheet\" href=\"/the-public-path/the-ref\">\n</head>\n```\n\nNone of the `link` elements have any of the `attributes` we specified for the `assets` or `links`.\n\nThis is because `HtmlWebpackPlugin.options.inject` needs to be set to `true` for `attributes` injection to work.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Jon Harris\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/html-webpack-tags-plugin/-/html-webpack-tags-plugin-2.0.17.tgz#1143cb41fa895eca6bc45207d3aadd914cee8b55",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/html-webpack-tags-plugin/-/html-webpack-tags-plugin-2.0.17.tgz",
    "hash": "1143cb41fa895eca6bc45207d3aadd914cee8b55",
    "integrity": "sha512-TKT8hnumMni6ztKfWZpP+UBeA7+aUn+qQQ4c9wT/p1IGTO/QWoIc19E+ZrxCcToDMjBO1NMYWkUbW4c4NtlGvg==",
    "registry": "npm",
    "packageName": "html-webpack-tags-plugin",
    "cacheIntegrity": "sha512-TKT8hnumMni6ztKfWZpP+UBeA7+aUn+qQQ4c9wT/p1IGTO/QWoIc19E+ZrxCcToDMjBO1NMYWkUbW4c4NtlGvg== sha1-EUPLQfqJXsprxFIH06rdkUzui1U="
  },
  "registry": "npm",
  "hash": "1143cb41fa895eca6bc45207d3aadd914cee8b55"
}