{
  "manifest": {
    "name": "node-object-hash",
    "version": "2.0.0",
    "description": "Node.js object hash library with properties/arrays sorting to provide constant hashes",
    "main": "dist/hasher.js",
    "types": "dist/hasher.d.ts",
    "files": [
      "dist/**/*.js",
      "dist/**/*.ts",
      "dist/**/*.map"
    ],
    "husky": {
      "hooks": {
        "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
      }
    },
    "standard-version": {
      "scripts": {
        "prerelease": "npm run test",
        "postbump": "echo Version: v$npm_package_version",
        "postchangelog": "replace \"https://github.com/SkeLLLa/\" \"https://gitlab.com/m03geek/\" CHANGELOG.md",
        "posttag": "git push --follow-tags origin $npm_package_config_releaseBranch"
      }
    },
    "dependencies": {},
    "devDependencies": {
      "@commitlint/cli": "^8.0.0",
      "@commitlint/config-conventional": "^8.0.0",
      "@types/jest": "^24.0.15",
      "@types/node": "^12.7.4",
      "codecov": "^3.5.0",
      "eslint": "^6.3.0",
      "eslint-config-google": "^0.14.0",
      "faker": "^4.0.0",
      "husky": "^3.0.5",
      "jest": "^24.7.1",
      "replace": "^1.1.0",
      "standard-version": "^7.0.0",
      "ts-jest": "^24.0.2",
      "ts-node": "^8.3.0",
      "tslint": "^5.18.0",
      "tslint-eslint-rules": "^5.4.0",
      "typedoc": "^0.15.0",
      "typedoc-plugin-markdown": "^2.1.10",
      "typescript": "^3.6.2"
    },
    "scripts": {
      "lint:eslint": "eslint .",
      "lint:tslint": "tslint -p ./ && tslint -p ./test",
      "lint": "npm run lint:eslint && npm run lint:tslint",
      "lint:fix": "eslint . --fix && tslint -p ./ --fix && tslint -p ./test --fix",
      "test": "npm audit || true && npm run lint && npm run unit",
      "unit": "jest --coverage",
      "postunit": "codecov",
      "prebenchmark": "npm i --no-save hash-object object-hash benchmark",
      "benchmark": "node benchmark/bench.js",
      "prebenchmark:custom": "npm i --no-save hash-object object-hash benchmark",
      "benchmark:custom": "node --expose-gc benchmark/custom.js",
      "build": "npm run build:node",
      "build:node": "tsc -p tsconfig.json",
      "prerelease": "npm run typedoc && git add -A ./docs",
      "release": "git add -A && standard-version -a",
      "typedoc": "rm -rf ./docs/* && typedoc --excludeExternals --name \"$npm_package_name\" --readme none --mode file --includeDeclarations --excludePrivate --theme markdown --out ./docs"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/SkeLLLa/node-object-hash.git"
    },
    "bugs": {
      "url": "https://gitlab.com/m03geek/node-object-hash/issues"
    },
    "homepage": "https://gitlab.com/m03geek/node-object-hash#README",
    "keywords": [
      "hash",
      "object",
      "hash-object",
      "object-hash",
      "es6",
      "crypto"
    ],
    "author": {
      "name": "m03geek"
    },
    "license": "MIT",
    "engines": {
      "node": ">=0.10.0"
    },
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-node-object-hash-2.0.0-9971fcdb7d254f05016bd9ccf508352bee11116b-integrity/node_modules/node-object-hash/package.json",
    "readmeFilename": "README.md",
    "readme": "# node-object-hash\n\n<div style=\"margin: 24px 0 16px;\">\n<img src=\"https://gitlab.com/m03geek/node-object-hash/raw/master/logo.svg\" align=\"left\" width=\"256\" height=\"auto\" alt=\"logo\" />\n\nTiny and fast node.js object hash library with properties/arrays sorting to provide constant hashes.\nIt also provides a method that returns sorted object strings that can be used for object comparison without hashes.\nOne of the fastest among other analogues (see [benchmarks](#benchmarks)).\n\nHashes are built on top of node's crypto module. If you want to use it in browser it's recommented to use `objectSorter` only. It will provide you with unique string representation of your object. Afterwards you may use some hash library to reduce string size. Also you may use something like [browserify-crypto](https://github.com/crypto-browserify/crypto-browserify) or some kind of crypto functions polyfills.\n\n[![Node](https://img.shields.io/node/v/node-object-hash.svg)](https://nodejs.org/download/release/latest)\n[![NPM Version](https://img.shields.io/npm/v/node-object-hash.svg)](https://www.npmjs.com/package/node-object-hash)\n[![Downloads Count](https://img.shields.io/npm/dm/node-object-hash.svg)](https://www.npmjs.com/package/node-object-hash)\n[![Vunerabilities Count](https://snyk.io/test/npm/node-object-hash/badge.svg)](https://www.npmjs.com/package/node-object-hash)\n[![Npms.io Score](https://badges.npms.io/node-object-hash.svg)](https://npms.io/search?q=node-object-hash)\n[![Build Status](https://gitlab.com/m03geek/node-object-hash/badges/master/pipeline.svg)](https://gitlab.com/m03geek/node-object-hash/commits/master)\n[![License](https://img.shields.io/npm/l/node-object-hash.svg)](https://gitlab.com/m03geek/node-object-hash/blob/master/LICENSE)\n[![Codecov Coverage](https://img.shields.io/codecov/c/gl/m03geek/node-object-hash.svg)](https://codecov.io/gl/m03geek/node-object-hash)\n[![LGTM Alerts](https://img.shields.io/lgtm/alerts/github/SkeLLLa/node-object-hash.svg)](https://lgtm.com/projects/g/SkeLLLa/node-object-hash/)\n[![LGTM Grade](https://img.shields.io/lgtm/grade/javascript/github/SkeLLLa/node-object-hash.svg)](https://lgtm.com/projects/g/SkeLLLa/node-object-hash/)\n\n</div>\n\n<br/>\n\n## ToC\n- [node-object-hash](#node-object-hash)\n  - [ToC](#toc)\n  - [What's new in v2.0.0](#whats-new-in-v200)\n    - [Breaking changes](#breaking-changes)\n    - [New features](#new-features)\n  - [Installation](#installation)\n  - [Features](#features)\n    - [Type map](#type-map)\n    - [Coercion map](#coercion-map)\n  - [Changes](#changes)\n  - [Docs](#docs)\n    - [API overview](#api-overview)\n      - [Constructor](#constructor)\n    - [API methods](#api-methods)\n      - [`hash(object[, options])`](#hashobject-options)\n      - [`sort(object)`](#sortobject)\n  - [Requirements](#requirements)\n    - [version \\>=1.0.0](#version-100)\n    - [version \\>=0.1.0 && <1.0.0](#version-010--100)\n  - [Examples](#examples)\n  - [Benchmarks](#benchmarks)\n    - [Usage](#usage)\n    - [Results](#results)\n      - [Custom benchmark (code)](#custom-benchmark-code)\n      - [Benchmark suite module (code)](#benchmark-suite-module-code)\n    - [Links](#links)\n  - [License](#license)\n\n## What's new in v2.0.0\n\n### Breaking changes \n\n* Library rewritten in typescript that could cause some side-effects, but it should not.\n* With `coerce=false` `Set`s will no longer generate the same hashes as `Array`s. In order to restore previous behavior set `coerce.set=true`.\n* With `coerce=false` `Symbol`s will generate hash based on symbol `.toString` value. That's useful for `Symbol.for('smth')`. If `coerce.symbol=true` all `Symbols`s will have equal hashes. \nTLDR; If you use library with `Set`s or `Symbol`s with `coerce=false` in order to keep hashes the same as in `v1.X.X` you should use following constructor:\n```\nconst hasher = require('node-object-hash')({coerce: {set: true, symbol: true}})\n```\n* Object sorter sources moved to `dist` directory. If you required it directly via `require('node-object-hash/objectSorter')` you should change it to require('node-object-hash/dist/objectSorter').\n* Removed old `v0` version from code.\n* Changed license to MIT.\n\n### New features\n\n* New granular options. Now you can specify what types need to be sorted or coerced.\n* Add new `trim` option. It can be used to remove unncecessary spaces in `string`s or `function` bodies.\n* Library rewritten to typescript, so it may have better ts compatibility.\n\n## Installation\n\n`npm i node-object-hash -S`\n\n## Features\n\n- Supports object property sorting for constant hashes for objects with same properties, but different order.\n- Supports ES6 Maps and Sets.\n- Supports type coercion (see table below).\n- Supports all hashes and encodings of crypto library.\n- Supports large objects and arrays.\n- Has granular options that allows to control what should be sorted or coerced.\n- Very fast comparing to other libs (see [Benchmarks](#benchmarks) section).\n\n### Type map\n\nThis map displays what types will have identical string representation (e.g. new Set([1, 2, 3]) and [1, 2, 3] will have\nequal string representations and hashes.\n\n| Initial type              | Mapped type  |\n|---------------------------|--------------|\n| Array ([])                | array        |\n| ArrayObject (new Array()) |              |\n| Int8Array                 |              |\n| Uint8Array                |              |\n| Uint8ClampedArray         |              |\n| Int16Array                |              |\n| Uint16Array               |              |\n| Int32Array                |              |\n| Uint32Array               |              |\n| Float32Array              |              |\n| Float64Array              |              |\n| Buffer                    |              |\n| Set                       |              |\n| | |\n| Map                       | array[array] |\n| | |\n| string ('') | string      | string       |\n| String (new String())     |              |\n| | |\n| boolean (true)            | boolean      |\n| Boolean (new Boolean())   |              |\n| | |\n| number (true)             | number       |\n| Number (new Number())     |              |\n| | |\n| Date                      | date         |\n| | |\n| Symbol                    | symbol       |\n| | |\n| undefined                 | undefined    |\n| | |\n| null                      | null         |\n| | |\n| function                  | function     |\n| | |\n| Object ({})               | object       |\n| Object (new Object())     |              |\n| | |\n| other                     | unknown      |\n\n\n### Coercion map\n| Initial \"type\" | Coerced type   | Example      |\n|----------------|----------------|--------------|\n| boolean        | string         | true -> 1    |\n| number         | string         | '1' -> 1     |\n| string         | string         | 'a' -> a     |\n| null           | string (empty) | null ->      |\n| undefined      | string (empty) | undefined -> |\n\n## Changes\n\nSee [changelog](CHANGELOG.md)\n\n## Docs\n\nFull API docs could be found in [docs](./docs/README.md).\n\n### API overview\n\n#### Constructor\n\n```js\nrequire('node-object-hash')([options])\n```\n\nReturns preconfigured object with API\n\nParameters:\n*  `options`:`object` - object with hasher config options\n*  `options.coerce`:`boolean|object` - if true performs type coercion (default: `true`);\ne.g. `hash(true) == hash('1') == hash(1)`, `hash(false) == hash('0') == hash(0)`\n*  `options.sort`:`boolean|object` - if true performs sorting on objects, arrays, etc. (default: `true`);\n*  `options.trim`:`boolean|object` - if true performs trim of spaces and replaces space-like characters with single space (default: `false`);\n*  `options.alg`:`string` - sets default hash algorithm (default: `'sha256'`); can be overridden in `hash` method;\n*  `options.enc`:`string` - sets default hash encoding (default: `'hex'`); can be overridden in `hash` method;\n\n### API methods\n\n#### `hash(object[, options])`\n\nReturns hash string.\n*  `object`:`*` object for calculating hash;\n*  `options`:`object` object with options;\n*  `options.alg`:`string` - hash algorithm (default: `'sha256'`);\n*  `options.enc`:`string` - hash encoding (default: `'hex'`);\n\n#### `sort(object)`\n\nReturns sorted string generated from object (can be used for object comparison)\n*  `object`:`*` - object for sorting;\n\n## Requirements\n\n### version \\>=1.0.0\n- `>=nodejs-0.10.0`\n\n### version \\>=0.1.0 && <1.0.0\n- `>=nodejs-6.0.0`\n- `>=nodejs-4.0.0` (requires to run node with `--harmony` flag)\n\n## Examples\n\n```js\nvar hasher = require('node-object-hash');\n\nvar hashSortCoerce = hasher({sort:true, coerce:true});\n// or\n// var hashSortCoerce = hasher();\n// or\n// var hashSort = hasher({sort:true, coerce:false});\n// or\n// var hashCoerce = hasher({sort:false, coerce:true});\n\nvar objects = {\n    a: {\n      a: [{c: 2, a: 1, b: {a: 3, c: 2, b: 0}}],\n      b: [1, 'a', {}, null],\n    },\n    b: {\n      b: ['a', 1, {}, undefined],\n      a: [{c: '2', b: {b: false, c: 2, a: '3'}, a: true}]\n    },\n    c: ['4', true, 0, 2, 3]\n};\n\nhashSortCoerce.hash(objects.a) === hashSortCoerce.hash(objects.b);\n// returns true\n\nhashSortCoerce.sort(object.c);\n// returns '[0,1,2,3,4]'\n```\n\nFor more examples you can see [tests](./test) or try it out online at [runkit](https://runkit.com/skellla/node-object-hash-example)\n\n## Benchmarks\n\nBench data - array of 100000 complex objects\n\n### Usage\n\n* `npm run bench` to run custom benchmark\n* `npm run benchmark` to run benchmark suite\n\n### Results\n\n#### Custom benchmark ([code](bench/index.js))\n\n| Library                               | Time (ms)  | Memory (Mb)        |\n|---------------------------------------|------------|--------------------|\n| node-object-hash-0.2.1                | 5813.575   | 34                 |\n| node-object-hash-1.0.X                | 2805.581   | 27                 |\n| node-object-hash-1.1.X (node v7)      | 2555.583   | 27                 |\n| node-object-hash-1.2.X (node v7)      | 2390.752   | 28                 |\n| node-object-hash-2.X.X (node v12)     | 1990.622   | 24                 |\n| object-hash-1.1.5  (node v7)          | 28115.553  | 39                 |\n| object-hash-1.1.4                     | 534528.254 | 41                 |\n| object-hash-1.1.3                     | ERROR      | Out of heap memory |\n| hash-object-0.1.7                     | 9219.826   | 42                 |\n\n#### Benchmark suite module ([code](bench/bench.js))\n\n| Library (node v12)      | Perf (ops/s) |\n|------------------------|--------------|\n| node-object-hash-2.0.0 | 2087 ±0.59%  |\n| object-hash-1.3.1      | 239  ±0.39%  |\n| hash-object-0.1.7      | 711  ±0.18%  |\n\n### Links\n\n* [object-hash](https://www.npmjs.com/package/object-hash) - Slow, useful for browsers because it not uses node's crypto library\n* [hash-object](https://www.npmjs.com/package/hash-object) - no ES6 types support\n\n## License\n\nMIT\n",
    "licenseText": "MIT License\n\nCopyright (c) 2019 m03geek\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/node-object-hash/-/node-object-hash-2.0.0.tgz#9971fcdb7d254f05016bd9ccf508352bee11116b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/node-object-hash/-/node-object-hash-2.0.0.tgz",
    "hash": "9971fcdb7d254f05016bd9ccf508352bee11116b",
    "integrity": "sha512-VZR0zroAusy1ETZMZiGeLkdu50LGjG5U1KHZqTruqtTyQ2wfWhHG2Ow4nsUbfTFGlaREgNHcCWoM/OzEm6p+NQ==",
    "registry": "npm",
    "packageName": "node-object-hash",
    "cacheIntegrity": "sha512-VZR0zroAusy1ETZMZiGeLkdu50LGjG5U1KHZqTruqtTyQ2wfWhHG2Ow4nsUbfTFGlaREgNHcCWoM/OzEm6p+NQ== sha1-mXH8230lTwUBa9nM9Qg1K+4REWs="
  },
  "registry": "npm",
  "hash": "9971fcdb7d254f05016bd9ccf508352bee11116b"
}