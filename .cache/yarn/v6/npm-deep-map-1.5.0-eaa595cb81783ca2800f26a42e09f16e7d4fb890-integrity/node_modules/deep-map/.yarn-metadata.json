{
  "manifest": {
    "name": "deep-map",
    "version": "1.5.0",
    "description": "Transforms nested values of complex objects",
    "main": "lib/index.js",
    "types": "lib/index.d.ts",
    "scripts": {
      "build:compile": "tsc -p tsconfig.build.json",
      "build:remove": "rimraf lib",
      "build": "npm run build:remove && npm run build:compile",
      "test:lint": "tslint \"src/**/*.ts\"",
      "test:unit": "istanbul cover -e .ts -x \"*.test.ts\" _mocha -- --opts mocha.opts",
      "test:report": "npm test && open coverage/lcov-report/index.html",
      "test": "npm run test:lint && npm run test:unit",
      "ci:coveralls": "cat coverage/lcov.info | coveralls"
    },
    "engines": {
      "node": ">=4"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/mcmath/deep-map.git"
    },
    "keywords": [
      "map",
      "deep",
      "recursive",
      "nested",
      "object",
      "array",
      "circular",
      "json",
      "primitive",
      "typescript",
      "typings"
    ],
    "author": {
      "name": "Akim McMath",
      "email": "akim.elijah.mcmath@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/mcmath/deep-map/issues"
    },
    "homepage": "https://github.com/mcmath/deep-map#readme",
    "devDependencies": {
      "@types/chai": "^3.5.0",
      "@types/es6-weak-map": "^1.2.0",
      "@types/lodash": "^4.14.62",
      "@types/mocha": "^2.2.40",
      "@types/sinon": "^2.1.2",
      "@types/sinon-chai": "^2.7.27",
      "chai": "^3.5.0",
      "coveralls": "^2.13.0",
      "istanbul": "1.1.0-alpha.1",
      "mocha": "^3.2.0",
      "rimraf": "^2.6.1",
      "sinon": "^2.1.0",
      "sinon-chai": "^2.9.0",
      "ts-node": "~1.2.3",
      "tslint": "^5.1.0",
      "typescript": "^2.2.2"
    },
    "dependencies": {
      "es6-weak-map": "^2.0.2",
      "lodash": "^4.17.4",
      "tslib": "^1.6.0"
    },
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-deep-map-1.5.0-eaa595cb81783ca2800f26a42e09f16e7d4fb890-integrity/node_modules/deep-map/package.json",
    "readmeFilename": "README.md",
    "readme": "# Deep Map\n\n[![Version][version-badge]][npm]\n[![License][license-badge]][license]\n[![Build][build-badge]][travis]\n[![Coverage][coverage-badge]][coveralls]\n[![Dependencies][dependencies-badge]][gemnasium]\n\n[Install](#install) | [Usage](#usage) | [API](#api) | [TypeScript](#typescript) | [License](#license)\n\n**Deep Map** recurses through an object and transforms its primitive values\n&ndash; including nested values &ndash; according to some function. Essentially,\nit's a deep version of [`Array.prototype.map()`][array-prototype-map] that\nworks on all objects rather than just on Arrays. Circular references are\nsupported.\n\nTo transform the *keys* of an object rather than its values, use\n[Deep Map Keys][deep-map-keys].\n\n## Install\n\nInstall Deep Map via [npm][npm].\n\n```sh\nnpm install --save deep-map\n```\n\n## Usage\n\nLet's say we have an object like this:\n\n```js\nconst info = {\n  name: '<%- name %>',\n  email: '<%- email %>',\n  keywords: ['<%- keyword1 %>', '<%- keyword2 %>'],\n  hobbies: {\n    primary: '<%- hobby1 %>',\n    secondary: '<%- hobby2 %>'\n  }\n};\n```\n\nAnd we want to fill it with this data:\n\n```js\nconst data = {\n  name: 'Samuel Johnson',\n  email: 'sam.johnson@dictionary.com',\n  keyword1: 'dictionary',\n  keyword2: 'lexicography',\n  hobby1: 'writing',\n  hobby2: 'torying',\n};\n```\n\nWe can use Deep Map like this:\n\n```js\nconst deepMap = require('deep-map');\nconst template = require('lodash/template');\n\nlet result = deepMap(info, value => template(value)(data));\n```\n\nAnd the result looks like this:\n\n```js\n{\n  name: 'Samuel Johnson',\n  email: 'sam.johnson@dictionary.com',\n  keywords: ['dictionary', 'lexicography'],\n  hobbies: {\n    primary: 'writing',\n    secondary: 'torying'\n  }\n}\n```\n\n## API\n\n#### `deepMap(object, mapFn, [options])`\n\n#### Parameters\n\n<table>\n  <thead>\n    <tr>\n      <th align=\"left\">Param</th>\n      <th align=\"left\">Type</th>\n      <th align=\"left\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>object</td>\n      <td><code>any</code></td>\n      <td>\n        The object whose values are to be transformed. Typically, this will be\n        a complex object containing other nested objects. This object may be an\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">\n        <code>Array</code></a>, and may contain nested arrays whose values will\n        be deeply transformed in the same way. The object may contain circular\n        references.\n      </td>\n    </tr>\n    <tr>\n      <td>mapFn</td>\n      <td><code>function</code></td>\n      <td>\n        The function used to transform each primitive value. The function is\n        called with two arguments:\n        <ul>\n          <li>\n            <strong>value</strong> &lt;<code>any</code>&gt;\n            The value being transformed.\n          </li>\n          <li>\n            <strong>key</strong> &lt;<code>string | number</code>&gt;\n            The key or index of the value being transformed. In the case\n            of plain objects, this will be a string; in the case of arrays,\n            this will be a number.\n          </li>\n        </ul>\n        The return value determines the value at the same position on the\n        resulting object.\n      </td>\n    </tr>\n    <tr>\n      <td>[options]</td>\n      <td><code>object</code></td>\n      <td>\n        An optional options object. The following options are accepted:\n        <ul>\n          <li>\n            <strong>inPlace</strong> &lt;<code>boolean=false</code>&gt;\n            Mutate <code>object</code> rather than constructing a new\n            object. Nested objects will also be mutated.\n          </li>\n          <li>\n            <strong>thisArg</strong> &lt;<code>any=undefined</code>&gt;\n            Sets the value of\n            <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\"><code>this</code></a>\n            within <code>mapFn()</code>.\n          </li>\n        </ul>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n#### Returns\n\nReturns a new object with the same keys as `object`. If `options.inPlace` is set\nto `true`, the original object is returned, mutated.\n\n## TypeScript\n\n[TypeScript][typescript] declarations are included in the package. Just import\nthe module, and things will just work.\n\nBy default, the compiler will assume that the return value will have the same\nshape as the input object. In most use cases, this is likely to be true. But in\nsome cases &ndash; like the one below &ndash; the assumption breaks down.\n\n```ts\nfunction isPositive(n: number): boolean {\n  return n >= 0;\n}\n\n// COMPILER ERROR: number not assignable to boolean :(\nlet bool: boolean = deepMap({n: 2}, isPositive).n;\n```\n\nPass a type argument to describe the shape of the return value, and everything\nwill be happy.\n\n```ts\nlet bool: boolean = deepMap<{n: boolean}>({n: 2}, isPositive).n; // :)\n```\n\n## License\n\nCopyright &copy; 2016&ndash;2017 Akim McMath. Licensed under the [MIT License][license].\n\n[version-badge]: https://img.shields.io/npm/v/deep-map.svg?style=flat-square\n[license-badge]: https://img.shields.io/npm/l/deep-map.svg?style=flat-square\n[build-badge]: https://img.shields.io/travis/mcmath/deep-map/master.svg?style=flat-square\n[coverage-badge]: https://img.shields.io/coveralls/mcmath/deep-map/master.svg?style=flat-square&service=github\n[dependencies-badge]: https://img.shields.io/gemnasium/mcmath/deep-map.svg?style=flat-square\n[npm]: https://www.npmjs.com/package/deep-map\n[license]: LICENSE\n[travis]: https://travis-ci.org/mcmath/deep-map\n[coveralls]: https://coveralls.io/github/mcmath/deep-map?branch=master\n[gemnasium]: https://gemnasium.com/mcmath/deep-map\n[deep-map-keys]: https://github.com/mcmath/deep-map-keys\n[typescript]: http://www.typescriptlang.org/\n[array-prototype-map]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n",
    "licenseText": "Copyright (c) 2016-2017 Akim McMath\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/deep-map/-/deep-map-1.5.0.tgz#eaa595cb81783ca2800f26a42e09f16e7d4fb890",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/deep-map/-/deep-map-1.5.0.tgz",
    "hash": "eaa595cb81783ca2800f26a42e09f16e7d4fb890",
    "integrity": "sha1-6qWVy4F4PKKADyakLgnxbn1PuJA=",
    "registry": "npm",
    "packageName": "deep-map",
    "cacheIntegrity": "sha512-J/pGXnVyw23IOCoTcCM+OcYav4uN77O/egioFBovP9tAZfMjAfHejsgeZvrR9vRl1rYawbI9IArbbCI5EW73gg== sha1-6qWVy4F4PKKADyakLgnxbn1PuJA="
  },
  "registry": "npm",
  "hash": "eaa595cb81783ca2800f26a42e09f16e7d4fb890"
}