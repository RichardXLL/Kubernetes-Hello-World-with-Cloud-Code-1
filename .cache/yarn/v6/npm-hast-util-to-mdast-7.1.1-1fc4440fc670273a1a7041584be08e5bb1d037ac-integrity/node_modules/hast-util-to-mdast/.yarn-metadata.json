{
  "manifest": {
    "name": "hast-util-to-mdast",
    "version": "7.1.1",
    "description": "hast utility to transform to mdast",
    "license": "MIT",
    "keywords": [
      "unist",
      "hast",
      "hast-util",
      "mdast",
      "mdast-util",
      "rehype",
      "remark",
      "markdown",
      "html",
      "transform"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/syntax-tree/hast-util-to-mdast.git"
    },
    "bugs": {
      "url": "https://github.com/syntax-tree/hast-util-to-mdast/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/unified"
    },
    "author": {
      "name": "Seth Vincent",
      "email": "sethvincent@gmail.com",
      "url": "https://sethvincent.com"
    },
    "contributors": [
      {
        "name": "Seth Vincent",
        "email": "sethvincent@gmail.com",
        "url": "https://sethvincent.com"
      },
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      }
    ],
    "files": [
      "index.js",
      "lib"
    ],
    "dependencies": {
      "extend": "^3.0.0",
      "hast-util-has-property": "^1.0.0",
      "hast-util-is-element": "^1.0.0",
      "hast-util-to-text": "^2.0.0",
      "mdast-util-phrasing": "^2.0.0",
      "mdast-util-to-string": "^1.0.0",
      "rehype-minify-whitespace": "^4.0.3",
      "repeat-string": "^1.6.1",
      "trim-trailing-lines": "^1.1.0",
      "unist-util-visit": "^2.0.0",
      "xtend": "^4.0.1"
    },
    "devDependencies": {
      "hastscript": "^5.0.0",
      "is-hidden": "^1.0.0",
      "mdast-util-assert": "^3.0.0",
      "negate": "^1.0.0",
      "nyc": "^15.0.0",
      "prettier": "^2.0.0",
      "rehype-parse": "^6.0.0",
      "remark-cli": "^8.0.0",
      "remark-parse": "^8.0.0",
      "remark-preset-wooorm": "^7.0.0",
      "remark-stringify": "^8.0.0",
      "tape": "^5.0.0",
      "unified": "^9.0.0",
      "unist-builder": "^2.0.0",
      "unist-util-remove-position": "^2.0.0",
      "xo": "^0.32.0"
    },
    "scripts": {
      "format": "remark . -qfo && prettier --write \"**/*.js\" && xo --fix",
      "test-api": "node test",
      "test-coverage": "nyc --reporter lcov tape test/index.js",
      "test": "npm run format && npm run test-coverage"
    },
    "nyc": {
      "check-coverage": true,
      "lines": 100,
      "functions": 100,
      "branches": 100
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true,
      "esnext": false,
      "rules": {
        "unicorn/no-fn-reference-in-iterator": "off",
        "unicorn/prefer-number-properties": "off",
        "unicorn/prefer-optional-catch-binding": "off",
        "no-multi-assign": "off"
      }
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-hast-util-to-mdast-7.1.1-1fc4440fc670273a1a7041584be08e5bb1d037ac-integrity/node_modules/hast-util-to-mdast/package.json",
    "readmeFilename": "readme.md",
    "readme": "# hast-util-to-mdast\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n[**hast**][hast] utility to transform to [**mdast**][mdast].\n\n> **Note**: You probably want to use [rehype-remark][].\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install hast-util-to-mdast\n```\n\n## Use\n\nSay we have the following `example.html`:\n\n```html\n<h2>Hello <strong>world!</strong></h2>\n```\n\n…and next to it, `example.js`:\n\n```js\nvar unified = require('unified')\nvar parse = require('rehype-parse')\nvar stringify = require('remark-stringify')\nvar vfile = require('to-vfile')\nvar toMdast = require('hast-util-to-mdast')\n\nvar file = vfile.readSync('example.html')\n\nvar hast = unified()\n  .use(parse)\n  .parse(file)\n\nvar mdast = toMdast(hast)\n\nvar doc = unified()\n  .use(stringify)\n  .stringify(mdast)\n\nconsole.log(doc)\n```\n\nNow, running `node example.js` yields:\n\n```markdown\n## Hello **world!**\n```\n\n## API\n\n### `toMdast(tree[, options])`\n\nTransform the given [**hast**][hast] [*tree*][tree] to [**mdast**][mdast].\n\n##### Options\n\n###### `options.handlers`\n\nObject mapping tag names or [*types*][type] to functions handling those\n[*elements*][element] or [*nodes*][hast-node].\nSee [`handlers/`][handlers] for examples.\n\nIn a handler, you have access to `h`, which should be used to create mdast nodes\nfrom hast nodes.\nOn `h`, there are fields that may be of interest.\nMost interesting of them is `h.wrapText`, which is `true` if the mdast content\ncan include newlines, and `false` if not (such as in headings or table cells).\n\n###### `options.document`\n\nWhether the given [*tree*][tree] is a complete document.\nApplies if the given `tree` is a [`root`][hast-root].\nFirst its [*children*][child] are transformed to [**mdast**][mdast].\nBy default, if one or more of the new mdast children are [*phrasing*][phrasing]\nnodes, and one or more are not, the phrasing nodes are wrapped in\n[*paragraphs*][mdast-paragraph].\nIf `document: true`, all mdast phrasing children are wrapped in paragraphs.\n\n###### `options.newlines`\n\nWhether to collapse to a line feed (`\\n`) instead of a single space (default) if\na streak of white-space in a text node contains a newline.\n\n###### `options.checked`\n\nValue to use when serializing a checked checkbox or radio input (`string`,\ndefault: `[x]`).\n\n###### `options.unchecked`\n\nValue to use when serializing an unchecked checkbox or radio input (`string`,\ndefault: `[ ]`).\n\n###### `options.quotes`\n\nList of quotes to use (`string[]`, default: `['\"']`).\nEach value can be one or two characters.\nWhen two, the first character determines the opening quote and the second the\nclosing quote at that level.\nWhen one, both the opening and closing quote are that character.\nThe order in which the preferred quotes appear determines which quotes to use at\nwhich level of nesting.\nSo, to prefer `‘’` at the first level of nesting, and `“”` at the second, pass:\n`['‘’', '“”']`.\nIf `<q>`s are nested deeper than the given amount of quotes, the markers wrap\naround: a third level of nesting when using `['«»', '‹›']` should have double\nguillemets, a fourth single, a fifth double again, etc.\n\n##### Returns\n\n[`MdastNode`][mdast-node].\n\n##### Notes\n\n###### Implied paragraphs\n\nThe algorithm supports implicit and explicit paragraphs (see [HTML Standard,\nA. van Kesteren; et al. WHATWG § 3.2.5.4 Paragraphs][spec]), such as:\n\n```html\n<article>\n  An implicit paragraph.\n  <h1>An explicit paragraph.</h1>\n</article>\n```\n\nYields:\n\n```markdown\nAn implicit paragraph.\n\n# An explicit paragraph.\n```\n\n###### Ignoring nodes\n\nSome [*nodes*][hast-node] are ignored and their content will not be present in\nthe [**mdast**][mdast] [*tree*][tree].\nTo ignore nodes, configure a [handler][] for their tag name or [*type*][type]\nthat returns nothing.\nFor example, to ignore `em` [*elements*][element], pass `handlers: {'em':\nfunction () {}}`:\n\n```html\n<p><strong>Importance</strong> and <em>emphasis</em>.</p>\n```\n\nYields:\n\n```markdown\n**Importance** and .\n```\n\nTo ignore a specific element from the HTML source, set `data-mdast` to\n`ignore`:\n\n```html\n<p><strong>Importance</strong> and <em data-mdast=\"ignore\">emphasis</em>.</p>\n```\n\nYields:\n\n```markdown\n**Importance** and .\n```\n\n###### HTML in Markdown\n\nWe try our best to map any HTML (hast) to Markdown (mdast) and keep it readable.\nReadability is one of Markdown’s greatest features: it’s terser than HTML, such\nas allowing `# Alpha` instead of `<h1>Alpha</h1>`.\n\nAnother awesome feature of Markdown is that you *can* author HTML inside it.\nAs we focus on readability we don’t do that, but you can by passing a handler.\n\nSay we for example have this HTML, and want to embed the SVG inside Markdown as\nwell:\n\n```html\n<p>\n  Some text with\n  <svg viewBox=\"0 0 1 1\" width=\"1\" height=\"1\"><rect fill=\"black\" x=\"0\" y=\"0\" width=\"1\" height=\"1\" /></svg>\n  a graphic… Wait is that a dead pixel?\n</p>\n```\n\nThis can be achieved with `example.js` like so:\n\n```js\nvar unified = require('unified')\nvar parse = require('rehype-parse')\nvar stringify = require('remark-stringify')\nvar vfile = require('to-vfile')\nvar toHtml = require('hast-util-to-html')\nvar toMdast = require('hast-util-to-mdast')\n\nvar file = vfile.readSync('example.html')\n\nvar hast = unified()\n  .use(parse)\n  .parse(file)\n\nvar mdast = toMdast(hast, {handlers: {svg: svg}})\n\nvar doc = unified()\n  .use(stringify)\n  .stringify(mdast)\n\nconsole.log(doc)\n\nfunction svg(h, node) {\n  return h(node, 'html', toHtml(node, {space: 'svg'}))\n}\n```\n\nYields:\n\n```markdown\nSome text with <svg viewBox=\"0 0 1 1\" width=\"1\" height=\"1\"><rect fill=\"black\" x=\"0\" y=\"0\" width=\"1\" height=\"1\"></rect></svg> a graphic… Wait is that a dead pixel?\n```\n\n## Security\n\nUse of `hast-util-to-mdast` can open you up to a\n[cross-site scripting (XSS)][xss] attack if the hast tree is unsafe.\nUse [`hast-util-santize`][sanitize] to make the hast tree safe.\n\n## Related\n\n*   [`hast-util-to-nlcst`](https://github.com/syntax-tree/hast-util-to-nlcst)\n    — transform hast to nlcst\n*   [`hast-util-to-xast`](https://github.com/syntax-tree/hast-util-to-xast)\n    — transform hast to xast\n*   [`mdast-util-to-hast`](https://github.com/syntax-tree/mdast-util-to-hast)\n    — transform mdast to hast\n*   [`mdast-util-to-nlcst`](https://github.com/syntax-tree/mdast-util-to-nlcst)\n    — transform mdast to nlcst\n*   [`remark-rehype`](https://github.com/remarkjs/remark-rehype)\n    — rehype support for remark\n*   [`rehype-remark`](https://github.com/rehypejs/rehype-remark)\n    — remark support for rehype\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/.github`][contributing] for ways to get\nstarted.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://img.shields.io/travis/syntax-tree/hast-util-to-mdast.svg\n\n[build]: https://travis-ci.org/syntax-tree/hast-util-to-mdast\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/hast-util-to-mdast.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/hast-util-to-mdast\n\n[downloads-badge]: https://img.shields.io/npm/dm/hast-util-to-mdast.svg\n\n[downloads]: https://www.npmjs.com/package/hast-util-to-mdast\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/hast-util-to-mdast.svg\n\n[size]: https://bundlephobia.com/result?p=hast-util-to-mdast\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-spectrum-7b16ff.svg\n\n[chat]: https://spectrum.chat/unified/syntax-tree\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[contributing]: https://github.com/syntax-tree/.github/blob/master/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/master/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/master/code-of-conduct.md\n\n[tree]: https://github.com/syntax-tree/unist#tree\n\n[child]: https://github.com/syntax-tree/unist#child\n\n[type]: https://github.com/syntax-tree/unist#type\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[mdast-paragraph]: https://github.com/syntax-tree/mdast#paragraph\n\n[mdast-node]: https://github.com/syntax-tree/mdast#nodes\n\n[phrasing]: https://github.com/syntax-tree/mdast#phrasingcontent\n\n[hast]: https://github.com/syntax-tree/hast\n\n[hast-node]: https://github.com/syntax-tree/hast#nodes\n\n[hast-root]: https://github.com/syntax-tree/hast#root\n\n[element]: https://github.com/syntax-tree/hast#element\n\n[rehype-remark]: https://github.com/rehypejs/rehype-remark\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[sanitize]: https://github.com/syntax-tree/hast-util-sanitize\n\n[handler]: #optionshandlers\n\n[handlers]: https://github.com/syntax-tree/hast-util-to-mdast/tree/master/lib/handlers\n\n[spec]: https://html.spec.whatwg.org/#paragraphs\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2016 Titus Wormer <tituswormer@gmail.com>\nCopyright (c) 2016 Seth Vincent <sethvincent@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/hast-util-to-mdast/-/hast-util-to-mdast-7.1.1.tgz#1fc4440fc670273a1a7041584be08e5bb1d037ac",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/hast-util-to-mdast/-/hast-util-to-mdast-7.1.1.tgz",
    "hash": "1fc4440fc670273a1a7041584be08e5bb1d037ac",
    "integrity": "sha512-MXD6n7sxvmg1ntpugcGAE0AD+SrZWUqlJgLjYZr93697s3TWgsrs/PGXcgk/E7mvcj4q85tZy5grsMDKzmqBxA==",
    "registry": "npm",
    "packageName": "hast-util-to-mdast",
    "cacheIntegrity": "sha512-MXD6n7sxvmg1ntpugcGAE0AD+SrZWUqlJgLjYZr93697s3TWgsrs/PGXcgk/E7mvcj4q85tZy5grsMDKzmqBxA== sha1-H8RED8ZwJzoacEFYS+COW7HQN6w="
  },
  "registry": "npm",
  "hash": "1fc4440fc670273a1a7041584be08e5bb1d037ac"
}