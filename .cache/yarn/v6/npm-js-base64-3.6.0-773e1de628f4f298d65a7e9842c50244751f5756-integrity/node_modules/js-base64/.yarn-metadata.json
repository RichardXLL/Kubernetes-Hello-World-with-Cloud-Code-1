{
  "manifest": {
    "name": "js-base64",
    "version": "3.6.0",
    "description": "Yet another Base64 transcoder in pure-JS",
    "main": "base64.js",
    "module": "base64.mjs",
    "types": "base64.d.ts",
    "files": [
      "base64.js",
      "base64.mjs",
      "base64.d.ts"
    ],
    "scripts": {
      "test": "make clean && make test"
    },
    "devDependencies": {
      "typescript": "^3.9.7",
      "@types/node": "^14.0.26",
      "esm": "^3.2.25",
      "mocha": "^8.0.0"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/dankogai/js-base64.git"
    },
    "keywords": [
      "base64",
      "binary"
    ],
    "author": {
      "name": "Dan Kogai"
    },
    "license": "BSD-3-Clause",
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-js-base64-3.6.0-773e1de628f4f298d65a7e9842c50244751f5756-integrity/node_modules/js-base64/package.json",
    "readmeFilename": "README.md",
    "readme": "[![build status](https://secure.travis-ci.org/dankogai/js-base64.png)](http://travis-ci.org/dankogai/js-base64)\n\n# base64.js\n\nYet another [Base64] transcoder.\n\n[Base64]: http://en.wikipedia.org/wiki/Base64\n\n## HEADS UP\n\nIn version 3.0 `js-base64` switch to ES2015 module so it is no longer compatible with legacy browsers like IE (see below).  And since version 3.3 it is written in TypeScript.  Now `base64.mjs` is compiled from `base64.ts` then `base64.js` is generated from `base64.mjs`.\n\n## Install\n\n```shell\n$ npm install --save js-base64\n```\n\n## Usage\n\n### In Browser\n\nLocally…\n\n```html\n<script src=\"base64.js\"></script>\n```\n\n… or Directly from CDN.  In which case you don't even need to install.\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/js-base64@3.6.0/base64.min.js\"></script>\n```\n\nThis good old way loads `Base64` in the global context (`window`).  Though `Base64.noConflict()` is made available, you should consider using ES6 Module to avoid tainting `window`.\n\n### As an ES6 Module\n\nlocally…\n\n```javascript\nimport { Base64 } from 'js-base64';\n```\n\n```javascript\n// or if you prefer no Base64 namespace\nimport { encode, decode } from 'js-base64';\n```\n\nor even remotely.\n\n```html\n<script type=\"module\">\n// note jsdelivr.net does not automatically minify .mjs\nimport { Base64 } from 'https://cdn.jsdelivr.net/npm/js-base64@3.6.0/base64.mjs';\n</script>\n```\n\n```html\n<script type=\"module\">\n// or if you prefer no Base64 namespace\nimport { encode, decode } from 'https://cdn.jsdelivr.net/npm/js-base64@3.6.0/base64.mjs';\n</script>\n```\n\n### node.js (commonjs)\n\n```javascript\nconst {Base64} = require('js-base64');\n```\n\nUnlike the case above, the global context is no longer modified.\n\nYou can also use [esm] to `import` instead of `require`.\n\n[esm]: https://github.com/standard-things/esm\n\n```javascript\nrequire=require('esm')(module);\nimport {Base64} from 'js-base64';\n```\n\n## SYNOPSIS\n\n```javascript\nlet latin = 'dankogai';\nlet utf8  = '小飼弾'\nlet u8s   =  new Uint8Array([100,97,110,107,111,103,97,105]);\nBase64.encode(latin);             // ZGFua29nYWk=\nBase64.btoa(latin);               // ZGFua29nYWk=\nBase64.btoa(utf8);                // raises exception\nBase64.fromUint8Array(u8s);       // ZGFua29nYWk=\nBase64.fromUint8Array(u8s, true); // ZGFua29nYW which is URI safe\nBase64.encode(utf8);              // 5bCP6aO85by+\nBase64.encode(utf8, true)         // 5bCP6aO85by-\nBase64.encodeURI(utf8);           // 5bCP6aO85by-\n```\n\n```javascript\nBase64.decode(      'ZGFua29nYWk=');// dankogai\nBase64.atob(        'ZGFua29nYWk=');// dankogai\nBase64.atob(        '5bCP6aO85by+');// 'å°é£¼å¼¾' which is nonsense\nBase64.toUint8Array('ZGFua29nYWk=');// u8s above\nBase64.decode(      '5bCP6aO85by+');// 小飼弾\n// note .decodeURI() is unnecessary since it accepts both flavors\nBase64.decode(      '5bCP6aO85by-');// 小飼弾\n```\n\n```javascript\nBase64.isValid(0);      // false: 0 is not string\nBase64.isValid('');     // true: a valid Base64-encoded empty byte\nBase64.isValid('ZA=='); // true: a valid Base64-encoded 'd'\nBase64.isValid('Z A='); // true: whitespaces are okay\nBase64.isValid('ZA');   // true: padding ='s can be omitted\nBase64.isValid('++');   // true: can be non URL-safe\nBase64.isValid('--');   // true: or URL-safe\nBase64.isValid('+-');   // false: can't mix both\n```\n\n### Built-in Extensions\n\nBy default `Base64` leaves built-in prototypes untouched.  But you can extend them as below.\n\n```javascript\n// you have to explicitly extend String.prototype\nBase64.extendString();\n// once extended, you can do the following\n'dankogai'.toBase64();        // ZGFua29nYWk=\n'小飼弾'.toBase64();           // 5bCP6aO85by+\n'小飼弾'.toBase64(true);       // 5bCP6aO85by-\n'小飼弾'.toBase64URI();        // 5bCP6aO85by- ab alias of .toBase64(true)\n'小飼弾'.toBase64URL();        // 5bCP6aO85by- an alias of .toBase64URI()\n'ZGFua29nYWk='.fromBase64();  // dankogai\n'5bCP6aO85by+'.fromBase64();  // 小飼弾\n'5bCP6aO85by-'.fromBase64();  // 小飼弾\n'5bCP6aO85by-'.toUint8Array();// u8s above\n```\n\n```javascript\n// you have to explicitly extend String.prototype\nBase64.extendString();\n// once extended, you can do the following\nu8s.toBase64();     // 'ZGFua29nYWk='\nu8s.toBase64URI();  // 'ZGFua29nYWk'\nu8s.toBase64URL();  // 'ZGFua29nYWk' an alias of .toBase64URI()\n```\n\n```javascript\n// extend all at once\nBase64.extendBuiltins()\n```\n\n## `.decode()` vs `.atob` (and `.encode()` vs `btoa()`)\n\nSuppose you have:\n\n```\nvar pngBase64 = \n  \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=\";\n```\n\nWhich is a Base64-encoded 1x1 transparent PNG, **DO NOT USE** `Base64.decode(pngBase64)`.  Use `Base64.atob(pngBase64)` instead.  `Base64.decode()` decodes to UTF-8 string while `Base64.atob()` decodes to bytes, which is compatible to browser built-in `atob()` (Which is absent in node.js).  The same rule applies to the opposite direction.\n\nOr even better, `Base64.toUint8Array(pngBase64)`.\n\n### If you really, really need an ES5 version\n\nYou can transpiles to an ES5 that runs on IE11.  Do the following in your shell.\n\n```shell\n$ make base64.es5.js\n```\n",
    "licenseText": "Copyright (c) 2014, Dan Kogai\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of {{{project}}} nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/js-base64/-/js-base64-3.6.0.tgz#773e1de628f4f298d65a7e9842c50244751f5756",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/js-base64/-/js-base64-3.6.0.tgz",
    "hash": "773e1de628f4f298d65a7e9842c50244751f5756",
    "integrity": "sha512-wVdUBYQeY2gY73RIlPrysvpYx+2vheGo8Y1SNQv/BzHToWpAZzJU7Z6uheKMAe+GLSBig5/Ps2nxg/8tRB73xg==",
    "registry": "npm",
    "packageName": "js-base64",
    "cacheIntegrity": "sha512-wVdUBYQeY2gY73RIlPrysvpYx+2vheGo8Y1SNQv/BzHToWpAZzJU7Z6uheKMAe+GLSBig5/Ps2nxg/8tRB73xg== sha1-dz4d5ij08pjWWn6YQsUCRHUfV1Y="
  },
  "registry": "npm",
  "hash": "773e1de628f4f298d65a7e9842c50244751f5756"
}