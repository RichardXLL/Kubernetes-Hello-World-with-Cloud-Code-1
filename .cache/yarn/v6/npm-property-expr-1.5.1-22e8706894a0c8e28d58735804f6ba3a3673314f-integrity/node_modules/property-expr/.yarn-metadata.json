{
  "manifest": {
    "name": "property-expr",
    "version": "1.5.1",
    "description": "tiny util for getting and setting deep object props safely",
    "main": "index.js",
    "scripts": {
      "test": "node ./test.js",
      "debug": "node --inspect-brk ./test.js"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/jquense/expr/"
    },
    "keywords": [
      "expr",
      "expression",
      "setter",
      "getter",
      "deep",
      "property",
      "Justin-Beiber",
      "accessor"
    ],
    "author": {
      "name": "@monasticpanic Jason Quense"
    },
    "license": "MIT",
    "prettier": {
      "singleQuote": true,
      "semi": false
    },
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-property-expr-1.5.1-22e8706894a0c8e28d58735804f6ba3a3673314f-integrity/node_modules/property-expr/package.json",
    "readmeFilename": "README.md",
    "readme": "expr\n=======\n\nTiny expression helper for creating compiled accessors; handles most stuff, including [\"bracket notation\"] for property access. Originally based off of Kendo UI Core expression code\n\n    npm install property-expr\n\n## Use\n\nSetters and getters are compiled to functions and cached for Performanceâ„¢\n\n    var expr = require('property-expr')\n      , obj = {\n        foo: {\n          bar: [ \"hi\", { buz: { baz: 'found me!' } }]\n        }\n      };\n\n    var getBaz = expr.getter('foo.bar[1][\"buz\"].baz')\n      , setBaz = expr.setter('foo.bar[1][\"buz\"].baz')\n\n    console.log(getBaz(obj)) // => 'found me!'\n    setBaz(obj, 'set me!')\n    console.log(obj.foo.bar[1].buz.baz) // => 'set me!'\n\n### `getter(expression, [ safeAccess ])`\n\nReturns a function that accepts an obj and returns the value at the supplied expression. You can create a \"safe\" getter, which won't error out when accessing properties that don't exist, reducing existance checks befroe property access:\n\n    expr.getter('foo.bar.baz', true)({ foo: {} }) // => undefined\n    //instead of val = foo.bar && foo.bar.baz\n\n### `setter(expression)`\n\nReturns a function that accepts an obj and a value and sets the property pointed to by the expression to the supplied value.\n\n\n### `expr(expression, [ safeAccess], [ paramName = 'data'])`\n\nReturns a normalized expression string pointing to a property on root object\n`paramName`.\n\n    expr.expr(\"foo['bar'][0].baz\", true, 'obj') // => \"(((obj.foo || {})['bar'] || {})[0])\"\n\n### `split(path) -> Array`\n\nReturns an array of each path segment.\n\n```js\nexpr.split(\"foo['bar'][0].baz\") // [ \"foo\", \"'bar'\", \"0\", \"baz\"]\n```\n\n### `forEach(path, iterator[, thisArg])`\n\nIterate through a path but segment, with some additional helpful metadata about the segment. The iterator function is called with: `pathSegment`, `isBracket`, `isArray`, `idx`, `segments`\n\n```js\nexpr.forEach('foo[\"bar\"][1]', function(pathSegment, isBracket, isArray, idx, segments) {\n  // 'foo'   -> isBracket = false, isArray = false, idx = 0\n  // '\"bar\"' -> isBracket = true,  isArray = false, idx = 1\n  // '0'     -> isBracket = false, isArray = true,  idx = 2\n})\n```\n\n### `normalizePath(path)`\n\nReturns an array of path segments without quotes and spaces.\n```js\nexpr.normalizePath('foo[\"bar\"][ \"1\" ][2][ \" sss \" ]')\n// ['foo', 'bar', '1', '2', ' sss ']\n```\n\n### `new Cache(maxSize)`\n\nJust an utility class, returns an instance of cache. When the max size is exceeded, cache clears its storage.\n```js\nvar cache = new Cache(2)\ncache.set('a', 123) // returns 123\ncache.get('a') // returns 123\ncache.clear()\n\ncache.set('a', 1)\ncache.set('b', 2) // cache contains 2 values\ncache.set('c', 3) // cache was cleaned automatically and contains 1 value\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 Jason Quense\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/property-expr/-/property-expr-1.5.1.tgz#22e8706894a0c8e28d58735804f6ba3a3673314f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/property-expr/-/property-expr-1.5.1.tgz",
    "hash": "22e8706894a0c8e28d58735804f6ba3a3673314f",
    "integrity": "sha512-CGuc0VUTGthpJXL36ydB6jnbyOf/rAHFvmVrJlH+Rg0DqqLFQGAP6hIaxD/G0OAmBJPhXDHuEJigrp0e0wFV6g==",
    "registry": "npm",
    "packageName": "property-expr",
    "cacheIntegrity": "sha512-CGuc0VUTGthpJXL36ydB6jnbyOf/rAHFvmVrJlH+Rg0DqqLFQGAP6hIaxD/G0OAmBJPhXDHuEJigrp0e0wFV6g== sha1-IuhwaJSgyOKNWHNYBPa6OjZzMU8="
  },
  "registry": "npm",
  "hash": "22e8706894a0c8e28d58735804f6ba3a3673314f"
}