{
  "manifest": {
    "name": "graphql-config",
    "version": "2.2.2",
    "description": "The easiest way to configure your development environment with your GraphQL schema (supported by most tools, editors & IDEs)",
    "engines": {
      "node": ">= 6.0.0"
    },
    "main": "lib/index.js",
    "types": "lib/index.d.ts",
    "files": [
      "LICENSE",
      "README.md",
      "lib/"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/kamilkisiela/graphql-config.git"
    },
    "keywords": [
      "graphql",
      "config",
      "relay",
      "apollo"
    ],
    "author": {
      "name": "Kamil Kisiela",
      "email": "kamil.kisiela@gmail.com",
      "url": "https://github.com/kamilkisiela"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/kamilkisiela/graphql-config/issues"
    },
    "homepage": "https://github.com/kamilkisiela/graphql-config#readme",
    "dependencies": {
      "graphql-import": "^0.7.1",
      "graphql-request": "^1.5.0",
      "js-yaml": "^3.10.0",
      "lodash": "^4.17.4",
      "minimatch": "^3.0.4"
    },
    "peerDependencies": {
      "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-graphql-config-2.2.2-a4b577826bba9b83e7b0f6cd617be43ca67da045-integrity/node_modules/graphql-config/package.json",
    "readmeFilename": "README.md",
    "readme": "# graphql-config\n\n![GraphQL Config](https://i.imgur.com/hw5tXw2.gif \"GraphQL Config\")\n\nThe easiest way to configure your development environment with your GraphQL schema (supported by most tools, editors &amp; IDEs)\n\n## Supported by...\n\n### Language Services\n* [graphql-language-service](https://github.com/graphql/graphql-language-service) - An interface for building GraphQL language services for IDEs (_pending_)\n\n### Editors\n* [js-graphql-intellij-plugin](https://github.com/jimkyndemeyer/js-graphql-intellij-plugin) - GraphQL language support for IntelliJ IDEA and WebStorm, including Relay.QL tagged templates in JavaScript and TypeScript (_pending_)\n* [atom-language-graphql](https://github.com/rmosolgo/language-graphql) - GraphQL support for Atom text editor (_pending_)\n* [vscode-graphql](https://github.com/stephen/vscode-graphql) - GraphQL support for VSCode text editor\n\n### Tools\n\n* [babel-plugin-react-relay](https://github.com/graphcool/babel-plugin-react-relay) - Babel compile step to process your `Relay.QL` queries (_pending_)\n* [babel-plugin-transform-relay-hot](https://github.com/nodkz/babel-plugin-transform-relay-hot) - Wrapper under BabelRelayPlugin with hot reload (_pending_)\n* [eslint-plugin-graphql](https://github.com/apollographql/eslint-plugin-graphql) - An ESLint plugin that checks tagged template strings against a GraphQL schema (_pending_)\n* [webpack-plugin-graphql-schema-hot](https://github.com/nodkz/webpack-plugin-graphql-schema-hot) - Webpack plugin which tracks changes in your schema and generates its introspection in `json` and `txt` formats (_pending_)\n\n> Did we forget a tool/editor? Please [add it here](https://github.com/graphcool/graphql-config/issues/new).\n\n**[Go to `graphql-config` library docs](#graphql-config-api)**\n\n## Usage\n\n**tl;dr**\n\nInstall [`graphql-cli`](https://github.com/kamilkisiela/graphql-cli) and run `graphql init`. Answer a few simple questions and you are set up!\n\nYou can either configure your GraphQL endpoint via a configuration file `.graphqlconfig`\n(or `.graphqlconfig.yaml`) which should be put into the root of your project\n\n### Simplest use case\n\nThe simplest config specifies only `schemaPath` which is path to the file with introspection\nresults or corresponding SDL document\n\n```json\n{\n  \"schemaPath\": \"schema.graphql\"\n}\n```\n\nor\n\n```json\n{\n  \"schemaPath\": \"schema.json\"\n}\n```\n\n### Specifying includes/excludes files\n\nYou can specify which files are included/excluded using the corresponding options:\n\n```json\n{\n  \"schemaPath\": \"schema.graphql\",\n  \"includes\": [\"*.graphql\"],\n  \"excludes\": [\"temp/**\"]\n}\n```\n\n> Note: `excludes` and `includes` fields are globs that should match filename.\n> So, just `temp` or `temp/` won't match all files inside the directory.\n> That's why the example uses `temp/**`\n\n#### Specifying endpoint info\n\nYou may specify your endpoints info in `.graphqlconfig` which may be used by some tools.\nThe simplest case:\n\n```json\n{\n  \"schemaPath\": \"schema.graphql\",\n  \"extensions\": {\n    \"endpoints\": {\n      \"dev\": \"https://example.com/graphql\"\n    }\n  }\n}\n```\n\nIn case you need provide additional information, for example headers to authenticate your GraphQL endpoint or\nan endpoint for subscription, you can use expanded version:\n\n```json\n{\n  \"schemaPath\": \"schema.graphql\",\n  \"extensions\": {\n    \"endpoints\": {\n      \"dev\": {\n        \"url\": \"https://example.com/graphql\",\n        \"headers\": {\n          \"Authorization\": \"Bearer ${env:AUTH_TOKEN_ENV}\"\n        },\n        \"subscription\": {\n          \"url\": \"ws://example.com/graphql\",\n          \"connectionParams\": {\n            \"Token\": \"${env:YOUR_APP_TOKEN}\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n> Note: do not save secure information in .graphqlconfig file. Use [Environment variables](specification.md#referencing-environment-variables) for that like in the example above.\n\nIn case if you have multiple endpoints use the following syntax:\n\n```json\n{\n  \"schemaPath\": \"schema.graphql\",\n  \"extensions\": {\n    \"endpoints\": {\n      \"prod\": {\n        \"url\": \"https://your-app.com/graphql\",\n        \"subscription\": {\n          \"url\": \"wss://subscriptions.graph.cool/v1/instagram\"\n        }\n      },\n      \"dev\": {\n        \"url\": \"http://localhost:3000/graphql\",\n        \"subscription\": {\n          \"url\": \"ws://localhost:3001\"\n        }\n      }\n    }\n  }\n}\n```\n\n### Multi-project configuration (advanced)\n> TBD\n\n__Refer to [specification use-cases](specification.md#use-cases) for details__\n\n## How it works\n\nThis project aims to be provide a unifying configuration file format to configure your GraphQL schema in your development environment.\n\nAdditional to the format specification, it provides the [`graphql-config`](#graphql-config-api) library, which is used by [all supported tools and editor plugins](#supported-by). The library reads your provided configuration and passes the actual GraphQL schema along to the tool which called it.\n\n\n## `graphql-config` API\n\nHere are very basic examples of how to use `graphql-config` library.\n\nYou can find **[the detailed documentation here](docs/)**\n\n### getGraphQLProjectConfig\n\n**NOTE:** if your tool works on per-file basis (e.g. editor plugin, linter, etc) use\n[`getGraphQLConfig`](#getGraphQLConfig) function\n\n`getGraphQLProjectConfig` should be used by tools that do not work on per-file basis\n\n```js\nimport { getGraphQLProjectConfig } from 'graphql-config'\n\nconst config = getGraphQLProjectConfig('./optionalProjectDir', 'optionalProjectName')\nconst schema = config.getSchema()\n// use schema for your tool/plugin\n```\n\n### getGraphQLConfig\n\n`getGraphQLConfig` should be used by tools that work on per-file basis (editor plugins,\nlinters, etc.)\n\n```js\nimport { getGraphQLConfig } from 'graphql-config'\n\nconst config = getGraphQLConfig('./optionalProjectDir')\nconst schema = config.getConfigForFile(filename).getSchema()\n// use schema for your tool/plugin\n```\n\n## Help & Community [![Discord Chat](https://img.shields.io/discord/625400653321076807)](https://discord.gg/xud7bH9)\n\nJoin our [Discord chat](https://discord.gg/xud7bH9) if you run into issues or have questions. We love talking to you!\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Kamil\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/graphql-config/-/graphql-config-2.2.2.tgz#a4b577826bba9b83e7b0f6cd617be43ca67da045",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/graphql-config/-/graphql-config-2.2.2.tgz",
    "hash": "a4b577826bba9b83e7b0f6cd617be43ca67da045",
    "integrity": "sha512-mtv1ejPyyR2mJUUZNhljggU+B/Xl8tJJWf+h145hB+1Y48acSghFalhNtXfPBcYl2tJzpb+lGxfj3O7OjaiMgw==",
    "registry": "npm",
    "packageName": "graphql-config",
    "cacheIntegrity": "sha512-mtv1ejPyyR2mJUUZNhljggU+B/Xl8tJJWf+h145hB+1Y48acSghFalhNtXfPBcYl2tJzpb+lGxfj3O7OjaiMgw== sha1-pLV3gmu6m4PnsPbNYXvkPKZ9oEU="
  },
  "registry": "npm",
  "hash": "a4b577826bba9b83e7b0f6cd617be43ca67da045"
}