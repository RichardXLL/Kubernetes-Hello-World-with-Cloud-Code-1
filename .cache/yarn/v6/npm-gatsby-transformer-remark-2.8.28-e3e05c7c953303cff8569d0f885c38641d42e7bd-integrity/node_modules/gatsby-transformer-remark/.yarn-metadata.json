{
  "manifest": {
    "name": "gatsby-transformer-remark",
    "description": "Gatsby transformer plugin for Markdown using the Remark library and ecosystem",
    "version": "2.8.28",
    "author": {
      "name": "Kyle Mathews",
      "email": "mathews.kyle@gmail.com"
    },
    "bugs": {
      "url": "https://github.com/gatsbyjs/gatsby/issues"
    },
    "dependencies": {
      "@babel/runtime": "^7.10.3",
      "bluebird": "^3.7.2",
      "gatsby-core-utils": "^1.3.15",
      "gray-matter": "^4.0.2",
      "hast-util-raw": "^4.0.0",
      "hast-util-to-html": "^4.0.1",
      "lodash": "^4.17.15",
      "mdast-util-to-hast": "^3.0.4",
      "mdast-util-to-string": "^1.1.0",
      "mdast-util-toc": "^5.0",
      "remark": "^10.0.1",
      "remark-parse": "^6.0.3",
      "remark-retext": "^3.1.3",
      "remark-stringify": "6.0.4",
      "retext-english": "^3.0.4",
      "sanitize-html": "^1.27.0",
      "underscore.string": "^3.3.5",
      "unified": "^6.2.0",
      "unist-util-remove-position": "^1.1.4",
      "unist-util-select": "^1.5.0",
      "unist-util-visit": "^1.4.1"
    },
    "devDependencies": {
      "@babel/cli": "^7.10.3",
      "@babel/core": "^7.10.3",
      "babel-preset-gatsby-package": "^0.5.2",
      "cross-env": "^5.2.1"
    },
    "homepage": "https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-transformer-remark#readme",
    "keywords": [
      "gatsby",
      "gatsby-plugin",
      "markdown",
      "remark"
    ],
    "license": "MIT",
    "peerDependencies": {
      "gatsby": "^2.12.0"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/gatsbyjs/gatsby.git",
      "directory": "packages/gatsby-transformer-remark"
    },
    "scripts": {
      "build": "babel src --out-dir . --ignore \"**/__tests__\"",
      "prepare": "cross-env NODE_ENV=production npm run build",
      "watch": "babel -w src --out-dir . --ignore \"**/__tests__\""
    },
    "engines": {
      "node": ">=10.13.0"
    },
    "gitHead": "2fabba835f61232e38d76a99b7d15c53b66e5214",
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-gatsby-transformer-remark-2.8.28-e3e05c7c953303cff8569d0f885c38641d42e7bd-integrity/node_modules/gatsby-transformer-remark/package.json",
    "readmeFilename": "README.md",
    "readme": "# gatsby-transformer-remark\n\nParses Markdown files using [Remark](http://remark.js.org/).\n\n## Install\n\n`npm install --save gatsby-transformer-remark`\n\n## How to use\n\n```javascript\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-transformer-remark`,\n    options: {\n      // CommonMark mode (default: true)\n      commonmark: true,\n      // Footnotes mode (default: true)\n      footnotes: true,\n      // Pedantic mode (default: true)\n      pedantic: true,\n      // GitHub Flavored Markdown mode (default: true)\n      gfm: true,\n      // Plugins configs\n      plugins: [],\n    },\n  },\n],\n```\n\nThe following parts of `options` are passed down to Remark as options:\n\n- `options.commonmark`\n- `options.footnotes`\n- `options.pedantic`\n- `options.gfm`\n\nThe details of the Remark options above could be found in [`remark-parse`'s documentation](https://github.com/remarkjs/remark/tree/main/packages/remark-parse#processoruseparse-options)\n\nA full explanation of how to use markdown in Gatsby can be found here:\n[Creating a Blog with Gatsby](https://www.gatsbyjs.org/blog/2017-07-19-creating-a-blog-with-gatsby/)\n\nThere are many Gatsby Remark plugins which you can install to customize how Markdown is processed. Many of them are demoed at https://using-remark.gatsbyjs.org/. See also the [source code for using-remark](https://github.com/gatsbyjs/gatsby/tree/master/examples/using-remark).\n\n## Parsing algorithm\n\nIt recognizes files with the following extensions as Markdown:\n\n- md\n- markdown\n\nEach Markdown file is parsed into a node of type `MarkdownRemark`.\n\nAll frontmatter fields are converted into GraphQL fields. TODO link to docs on\nauto-inferring types/fields.\n\nThis plugin adds additional fields to the `MarkdownRemark` GraphQL type\nincluding `html`, `excerpt`, `headings`, etc. Other Gatsby plugins can also add\nadditional fields.\n\n## How to query\n\nA sample GraphQL query to get MarkdownRemark nodes:\n\n```graphql\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        html\n        headings {\n          depth\n          value\n        }\n        frontmatter {\n          # Assumes you're using title in your frontmatter.\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n### Getting table of contents\n\nUsing the following GraphQL query you'll be able to get the table of contents\n\n```graphql\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        html\n        tableOfContents\n      }\n    }\n  }\n}\n```\n\n### Configuring the tableOfContents\n\nBy default the tableOfContents is using the field `slug` to generate absolute URLs. You can however provide another field using the pathToSlugField parameter. **Note** that providing a non existing field will cause the result to be null. You can also pass `absolute: false` to generate relative path. To alter the default values for tableOfContents generation, include values for `heading` (string) and/or `maxDepth` (number 1 to 6) in GraphQL query. If a value for `heading` is given, the first heading that matches will be omitted and the toc is generated from the next heading of the same depth onwards. Value for `maxDepth` sets the maximum depth of the toc (i.e. if a maxDepth of 3 is set, only h1 to h3 headings will appear in the toc).\n\n```graphql\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        html\n        tableOfContents(\n          absolute: true\n          pathToSlugField: \"frontmatter.path\"\n          heading: \"only show toc from this heading onwards\"\n          maxDepth: 2\n        )\n        frontmatter {\n          # Assumes you're using path in your frontmatter.\n          path\n        }\n      }\n    }\n  }\n}\n```\n\nTo pass default options to the plugin generating the tableOfContents, configure it in gatsby-config.js as shown below. The options shown below are the defaults used by the plugin.\n\n```javascript\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-transformer-remark`,\n    options: {\n      tableOfContents: {\n        heading: null,\n        maxDepth: 6,\n      },\n    },\n  },\n]\n```\n\n### Excerpts\n\n#### Length\n\nBy default, excerpts have a maximum length of 140 characters. You can change the default using the `pruneLength` argument. For example, if you need 500 characters, you can specify:\n\n```graphql\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        html\n        excerpt(pruneLength: 500)\n      }\n    }\n  }\n}\n```\n\n#### Format\n\nBy default, Gatsby will return excerpts as plain text. This might be useful for populating [opengraph](https://en.wikipedia.org/wiki/Facebook_Platform#Open_Graph_protocol) HTML tags for SEO reasons. You can also explicitly specify a `PLAIN` format like so:\n\n```graphql\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        excerpt(format: PLAIN)\n      }\n    }\n  }\n}\n```\n\nIt's also possible to ask Gatsby to return excerpts formatted as HTML. You might use this if you have a blog post whose excerpt contains markdown content--e.g. header, link, etc.--and you want these links to render as HTML.\n\n```graphql\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        excerpt(format: HTML)\n      }\n    }\n  }\n}\n```\n\nYou can also get excerpts in Markdown format.\n\n```graphql\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        excerpt(format: MARKDOWN)\n      }\n    }\n  }\n}\n```\n\n## gray-matter options\n\n`gatsby-transformer-remark` uses [gray-matter](https://github.com/jonschlinkert/gray-matter) to parse markdown frontmatter, so you can specify any of the options mentioned [here](https://github.com/jonschlinkert/gray-matter#options) in the `gatsby-config.js` file.\n\n### Example: Excerpts\n\nIf you don't want to use `pruneLength` for excerpts but a custom separator, you can specify an `excerpt_separator` in the `gatsby-config.js` file:\n\n```javascript\n{\n  \"resolve\": `gatsby-transformer-remark`,\n  \"options\": {\n    \"excerpt_separator\": `<!-- end -->`\n  }\n}\n```\n\nAny file that does not have the given `excerpt_separator` will fall back to the default pruning method.\n\n## Troubleshooting\n\n### Excerpts for non-latin languages\n\nBy default, `excerpt` uses `underscore.string/prune` which doesn't handle non-latin characters ([https://github.com/epeli/underscore.string/issues/418](https://github.com/epeli/underscore.string/issues/418)).\n\nIf that is the case, you can set `truncate` option on `excerpt` field, like:\n\n```graphql\n{\n  markdownRemark {\n    excerpt(truncate: true)\n  }\n}\n```\n\n### Excerpts for HTML embedded in Markdown files\n\nIf your Markdown file contains HTML, `excerpt` will not return a value.\n\nIn that case, you can set an `excerpt_separator` in the `gatsby-config.js` file:\n\n```javascript\n{\n  \"resolve\": `gatsby-transformer-remark`,\n  \"options\": {\n    \"excerpt_separator\": `<!-- endexcerpt -->`\n  }\n}\n```\n\nEdit your Markdown files to include that HTML tag after the text you'd like to appear in the excerpt:\n\n```markdown\n---\ntitle: \"my little pony\"\ndate: \"2017-09-18T23:19:51.246Z\"\n---\n\n<p>Where oh where is that pony?</p>\n<!-- endexcerpt -->\n<p>Is he in the stable or down by the stream?</p>\n```\n\nThen specify `MARKDOWN` as the format in your graphql query:\n\n```graphql\n{\n  markdownRemark {\n    excerpt(format: MARKDOWN)\n  }\n}\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Gatsbyjs\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/gatsby-transformer-remark/-/gatsby-transformer-remark-2.8.28.tgz#e3e05c7c953303cff8569d0f885c38641d42e7bd",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/gatsby-transformer-remark/-/gatsby-transformer-remark-2.8.28.tgz",
    "hash": "e3e05c7c953303cff8569d0f885c38641d42e7bd",
    "integrity": "sha512-89f3ouvgXx7ZMvqk7zggdnbucvGs0w9z0k8Gqn8RMhipPRWeGngh2+WOh9q9ekus1e8wyMJxTe0kFdn37KHykg==",
    "registry": "npm",
    "packageName": "gatsby-transformer-remark",
    "cacheIntegrity": "sha512-89f3ouvgXx7ZMvqk7zggdnbucvGs0w9z0k8Gqn8RMhipPRWeGngh2+WOh9q9ekus1e8wyMJxTe0kFdn37KHykg== sha1-4+BcfJUzA8/4Vp0PiFw4ZB1C570="
  },
  "registry": "npm",
  "hash": "e3e05c7c953303cff8569d0f885c38641d42e7bd"
}