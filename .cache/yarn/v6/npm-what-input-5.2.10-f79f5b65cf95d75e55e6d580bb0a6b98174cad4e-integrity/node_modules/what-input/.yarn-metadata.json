{
  "manifest": {
    "name": "what-input",
    "version": "5.2.10",
    "description": "A global utility for tracking the current input method (mouse, keyboard or touch).",
    "main": "dist/what-input.js",
    "types": "src/scripts/what-input.d.ts",
    "repository": {
      "url": "https://github.com/ten1seven/what-input.git",
      "type": "git"
    },
    "keywords": [
      "accessibility",
      "a11y",
      "input",
      "javascript"
    ],
    "author": {
      "name": "Jeremy Fields",
      "email": "jeremy.fields@viget.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/ten1seven/what-input/issues"
    },
    "scripts": {
      "start": "gulp"
    },
    "homepage": "https://github.com/ten1seven/what-input",
    "devDependencies": {
      "autoprefixer": "^9.6.1",
      "babel-core": "^6.23.1",
      "babel-loader": "^6.3.2",
      "babel-preset-env": "^1.6.0",
      "browser-sync": "^2.26.7",
      "css-mqpacker": "^7.0.0",
      "del": "^5.1.0",
      "gulp": "^4.0.2",
      "gulp-concat": "^2.6.1",
      "gulp-cssnano": "^2.1.3",
      "gulp-gh-pages": "^0.5.4",
      "gulp-header": "^2.0.9",
      "gulp-load-plugins": "^2.0.1",
      "gulp-notify": "^3.2.0",
      "gulp-plumber": "^1.2.1",
      "gulp-postcss": "^8.0.0",
      "gulp-rename": "^1.4.0",
      "gulp-sass": "^4.0.2",
      "gulp-sass-glob": "^1.1.0",
      "gulp-sourcemaps": "^2.6.5",
      "gulp-standard": "^14.0.0",
      "gulp-uglify": "^3.0.2",
      "stylelint-config-prettier": "^6.0.0",
      "stylelint-config-standard": "^19.0.0",
      "webpack-stream": "3.2.0"
    },
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-what-input-5.2.10-f79f5b65cf95d75e55e6d580bb0a6b98174cad4e-integrity/node_modules/what-input/package.json",
    "readmeFilename": "README.md",
    "readme": "# What Input?\n\n**A global utility for tracking the current input method (mouse, keyboard or touch).**\n\n## _What Input_ is now v5\n\nNow with more information and less opinion!\n\n_What Input_ adds data attributes to the `window` based on the type of input being used. It also exposes a simple API that can be used for scripting interactions.\n\n## How it works\n\n_What Input_ uses event bubbling on the `window` to watch for mouse, keyboard and touch events (via `mousedown`, `keydown` and `touchstart`). It then sets or updates a `data-whatinput` attribute.\n\nPointer Events are supported but note that `pen` inputs are remapped to `touch`.\n\n_What Input_ also exposes a tiny API that allows the developer to ask for the current input, set custom ignore keys, and set and remove custom callback functions.\n\n_What Input does not make assumptions about the input environment before the page is interacted with._ However, the `mousemove` and `pointermove` events are used to set a `data-whatintent=\"mouse\"` attribute to indicate that a mouse is being used _indirectly_.\n\n## Demo\n\nCheck out the demo to see _What Input_ in action.\n\nhttps://ten1seven.github.io/what-input\n\n### Interacting with Forms\n\nSince interacting with a form _always_ requires use of the keyboard, _What Input_ uses the `data-whatintent` attribute to display a \"buffered\" version of input events while form `<input>`s, `<select>`s, and `<textarea>`s are being interacted with (i.e. mouse user's `data-whatintent` will be preserved as `mouse` while typing).\n\n## Installing\n\nDownload the file directly.\n\nInstall via Yarn:\n\n```shell\nyarn add what-input\n```\n\nInstall via NPM:\n\n```shell\nnpm install what-input\n```\n\n## Usage\n\nInclude the script directly in your project.\n\n```html\n<script src=\"path/to/what-input.js\"></script>\n```\n\nOr require with a script loader.\n\n```javascript\nimport 'what-input'\n\n// or\n\nimport whatInput from 'what-input'\n\n// or\n\nrequire('what-input')\n\n// or\n\nvar whatInput = require('what-input')\n\n// or\n\nrequirejs.config({\n  paths: {\n    whatInput: 'path/to/what-input',\n  },\n})\n\nrequire(['whatInput'], function () {})\n```\n\n_What Input_ will start doing its thing while you do yours.\n\n### Default Behavior\n\n#### Persisting Input/Intent Across Pages\n\nBy default, _What Input_ uses [session storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage) to persist the input and intent values across pages. The benefit is that once a visitor has interacted with the page, subsequent pages won't have to wait for interactions to know the input method.\n\nThis behavior can be disabled by adding a `data-whatpersist=\"false\"` attribute on either the `<html>` or `<body>`.\n\n```html\n<html dir=\"ltr\" lang=\"en\" data-whatpersist=\"false\">\n  ...\n</html>\n```\n\nor\n\n```html\n<body data-whatpersist=\"false\">\n  ...\n</body>\n```\n\nSession storage can be cleared at any time with:\n\n```javascript\nwhatInput.clearStorage()\n```\n\n### Basic Styling\n\n```css\n/*\n * only suppress the focus ring once what-input has successfully started\n */\n\n/* suppress focus ring on form controls for mouse users */\n[data-whatintent='mouse'] *:focus {\n  outline: none;\n}\n```\n\n**Note:** If you remove outlines with `outline: none;`, be sure to provide clear visual `:focus` styles so the user can see which element they are on at any time for greater accessibility. Visit [W3C's WCAG 2.0 2.4.7 Guideline](https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-focus-visible.html) to learn more.\n\n### Scripting\n\n#### Current Input\n\nAsk _What Input_ what the current input method is. This works best if asked after the events _What Input_ is bound to (`mousedown`, `keydown` and `touchstart`).\n\n```javascript\nwhatInput.ask() // returns `mouse`, `keyboard` or `touch`\n\nmyButton.addEventListener('click', () => {\n  if (whatInput.ask() === 'mouse') {\n    // do mousy things\n  } else if (whatInput.ask() === 'keyboard') {\n    // do keyboard things\n  }\n})\n```\n\nIf it's necessary to know if `mousemove` is being used, use the `'intent'` option. For example:\n\n```javascript\n/*\n * nothing has happened but the mouse has moved\n */\n\nwhatInput.ask() // returns `initial` because the page has not been directly interacted with\nwhatInput.ask('intent') // returns `mouse` because mouse movement was detected\n\n/*\n * the keyboard has been used, then the mouse was moved\n */\n\nwhatInput.ask() // returns `keyboard` because the keyboard was the last direct page interaction\nwhatInput.ask('intent') // returns `mouse` because mouse movement was the most recent action detected\n```\n\n### Current Element\n\nAsk _What Input_ the currently focused DOM element.\n\n```javascript\nwhatInput.element() // returns a string, like `input` or null\n```\n\n#### Ignore Keys\n\nSet a custom array of [keycodes](http://keycode.info/) that will be ignored (will not switch over to `keyboard`) when pressed. _A custom list will overwrite the default values._\n\n```javascript\n/*\n * default ignored keys:\n * 16, // shift\n * 17, // control\n * 18, // alt\n * 91, // Windows key / left Apple cmd\n * 93  // Windows menu / right Apple cmd\n */\n\nwhatInput.ignoreKeys([1, 2, 3])\n```\n\n#### Specific Keys\n\nSet a custom array of [keycodes](http://keycode.info/) that will trigger the keyboard pressed intent (will not switch to `keyboard` unless these keys are pressed). _This overrides ignoreKeys._\n\n```javascript\n// only listen to tab keyboard press\nwhatInput.specificKeys([9])\n```\n\n#### Custom Callbacks\n\nFire a function when the input or intent changes.\n\n```javascript\n// create a function to be fired\nvar myFunction = function (type) {\n  console.log(type)\n}\n\n// fire `myFunction` when the intent changes\nwhatInput.registerOnChange(myFunction, 'intent')\n\n// fire `myFunction` when the input changes\nwhatInput.registerOnChange(myFunction, 'input')\n\n// remove custom event\nwhatInput.unRegisterOnChange(myFunction)\n```\n\n## Compatibility\n\n_What Input_ works in all modern browsers.\n\n## Changelog\n\n### v5.2.8 - 5.2.10\n\n- **Added:** TypeScript definitions via @greypants\n\n### v5.2.7\n\n- **Fixed:** Moves sourcemap to sit next to JavaScript package.\n\n### v5.2.6\n\n- **Fixed:** adds `DOMContentLoaded` event before looking for `data-whatpersist` attribute on body.\n\n### v5.2.5\n\n- **Fixed:** Hotfix for shaky support of `dataset` in IE10.\n\n### v5.2.4\n\n- **Added:** Ability to add `data-whatpersist=\"false\"` attribute to the `<html>` or `<body>` tag to disable usage of session storage to persist input/intent across pages.\n- **Updated:** Build tools and added linting.\n\n### v5.2.3\n\n- **Fixed:** `activeElement` is null bug in IE is fixed (thanks @EasterPeanut).\n- **Fixed:** Mousewheel event detection works correctly again.\n\n### v5.2.1\n\n- **Fixed:** iOS was occasionally reporting `mouse` because of event execution order.\n- **Added:** `touchend` to input map\n- **Added:** Allows buttons inside forms to be treated like other form inputs.\n- **Added:** iTouch intent indicator in demo page (it worked all along, you just couldn't see it).\n\n### v5.1.4\n\n- **Fixed:** Increase buffering time by 20ms to fix iOS reporting mousedown\n- **Fixed:** Adds `touchend` to input map\n\n### v5.1.3\n\n- **Added:** Sourcemap for the minified version.\n\n### v5.1.2\n\n- **Added:** `specificKeys` functionality to allow overriding of keyboard keys list. Fix via [bk3](https://github.com/bk3).\n\n### v5.1.1\n\n- **Fixed:** Browsers with cookies turned off would throw an error with session storage. Fix via [yuheiy](https://github.com/yuheiy).\n\n### v5.1.0\n\n- **Added:** Session variable stores last used input and intent so subsequent page loads don't have to wait for interactions to set the correct input and intent state.\n- **Removed:** IE8 support.\n\n### v5.0.7\n\n- **Fixed:** `unRegisterOnChange` failed to unregister items at index 0.\n\n### v5.0.5\n\n- **Fixed:** Fail gracefully in non-DOM environments.\n\n### v5.0.3\n\n- **Fixed:** Event buffer for touch was not working correctly.\n\n### Changes from v4\n\n- **Added:** A the ability to add and remove custom callback function when the input or intent changes with `whatInput.registerOnChange` and `whatInput.unRegisterOnChange`.\n- **Added:** A `data-whatelement` attribute exposes any currently focused DOM element (i.e. `data-whatelement=\"a\"` or `data-whatelement=\"input\"`).\n- **Added:** A `data-whatclasses` attribute exposes any currently focused element's classes as a comma-separated list (i.e. `data-whatclasses=\"class1,class2\"`).\n- **Added:** An API option to provide a custom array of keycodes that will be ignored.\n- **Changed:** Typing in form fields is no longer filtered out. The `data-whatinput` attribute immediately reflects the current input. The `data-whatintent` attribute now takes on the role of remembering mouse input prior to typing in or clicking on a form field.\n- **Changed:** If you use the Tab key to move from one input to another one - the `data-whatinput` attribute reflects the current input (switches to \"keyboard\").\n- **Removed:** `whatInput.types()` API option.\n- **Removed:** Bower support.\n- **Fixed:** Using mouse modifier keys (`shift`, `control`, `alt`, `cmd`) no longer toggles back to keyboard.\n\n## Acknowledgments\n\nSpecial thanks to [Viget](http://viget.com/) for their encouragement and commitment to open source projects. Visit [code.viget.com](http://code.viget.com/) to see more projects from [Viget](http://viget.com).\n\nThanks to [mAAdhaTTah](https://github.com/mAAdhaTTah) for the initial conversion to Webpack. Thanks to [greypants](https://github.com/greypants) for adding TypeScript definitions.\n\n_What Input_ is written and maintained by [@ten1seven](https://github.com/ten1seven).\n\n## License\n\n_What Input_ is freely available under the [MIT License](http://opensource.org/licenses/MIT).\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Jeremy Fields\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/what-input/-/what-input-5.2.10.tgz#f79f5b65cf95d75e55e6d580bb0a6b98174cad4e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/what-input/-/what-input-5.2.10.tgz",
    "hash": "f79f5b65cf95d75e55e6d580bb0a6b98174cad4e",
    "integrity": "sha512-7AQoIMGq7uU8esmKniOtZG3A+pzlwgeyFpkS3f/yzRbxknSL68tvn5gjE6bZ4OMFxCPjpaBd2udUTqlZ0HwrXQ==",
    "registry": "npm",
    "packageName": "what-input",
    "cacheIntegrity": "sha512-7AQoIMGq7uU8esmKniOtZG3A+pzlwgeyFpkS3f/yzRbxknSL68tvn5gjE6bZ4OMFxCPjpaBd2udUTqlZ0HwrXQ== sha1-959bZc+V115V5tWAuwprmBdMrU4="
  },
  "registry": "npm",
  "hash": "f79f5b65cf95d75e55e6d580bb0a6b98174cad4e"
}