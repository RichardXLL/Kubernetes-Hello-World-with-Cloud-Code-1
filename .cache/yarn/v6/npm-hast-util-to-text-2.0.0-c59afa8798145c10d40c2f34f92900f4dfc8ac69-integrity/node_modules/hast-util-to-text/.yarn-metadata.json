{
  "manifest": {
    "name": "hast-util-to-text",
    "version": "2.0.0",
    "description": "hast utility to get the plain-text value of a node according to the `innerText` algorithm",
    "license": "MIT",
    "keywords": [
      "unist",
      "hast",
      "hast-util",
      "util",
      "utility",
      "html",
      "string",
      "content",
      "text",
      "innertext"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/syntax-tree/hast-util-to-text.git"
    },
    "bugs": {
      "url": "https://github.com/syntax-tree/hast-util-to-text/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/unified"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "https://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      }
    ],
    "files": [
      "index.js"
    ],
    "dependencies": {
      "hast-util-is-element": "^1.0.0",
      "repeat-string": "^1.0.0",
      "unist-util-find-after": "^3.0.0"
    },
    "devDependencies": {
      "browserify": "^16.0.0",
      "hastscript": "^5.0.0",
      "nyc": "^15.0.0",
      "prettier": "^1.0.0",
      "remark-cli": "^7.0.0",
      "remark-preset-wooorm": "^6.0.0",
      "tape": "^4.0.0",
      "tinyify": "^2.0.0",
      "unist-builder": "^2.0.0",
      "xo": "^0.27.0"
    },
    "scripts": {
      "format": "remark . -qfo && prettier --write \"**/*.js\" && xo --fix",
      "build-bundle": "browserify . -s hastUtilToText -o hast-util-to-text.js",
      "build-mangle": "browserify . -s hastUtilToText -p tinyify -o hast-util-to-text.min.js",
      "build": "npm run build-bundle && npm run build-mangle",
      "test-api": "node test",
      "test-coverage": "nyc --reporter lcov tape test.js",
      "test": "npm run format && npm run build && npm run test-coverage"
    },
    "nyc": {
      "check-coverage": true,
      "lines": 100,
      "functions": 100,
      "branches": 100
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true,
      "esnext": false,
      "ignores": [
        "hast-util-to-text.js"
      ]
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-hast-util-to-text-2.0.0-c59afa8798145c10d40c2f34f92900f4dfc8ac69-integrity/node_modules/hast-util-to-text/package.json",
    "readmeFilename": "readme.md",
    "readme": "# hast-util-to-text\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n[**hast**][hast] utility to get the plain-text value of a [*node*][node].\n\nThis is like the DOMs `Node#innerText` getter but there are some deviations from\nthe spec.\nThe resulting text is returned.\n\nYou’d typically want to use [`hast-util-to-string`][to-string]\n(`textContent`), but `hast-util-to-text` (`innerText`) adds for example line\nbreaks where `<br>` elements are used.\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install hast-util-to-text\n```\n\n## Use\n\n```js\nvar h = require('hastscript')\nvar toText = require('hast-util-to-text')\n\nvar tree = h('div', [\n  h('h1', {hidden: true}, 'Alpha.'),\n  h('article', [\n    h('p', ['Bravo', h('br'), 'charlie.']),\n    h('p', 'Delta echo \\t foxtrot.')\n  ])\n])\n\nconsole.log(toText(tree))\n```\n\nYields:\n\n```txt\nBravo\ncharlie.\n\nDelta echo foxtrot.\n```\n\n## API\n\n### `toText(node)`\n\nUtility to get the plain-text value of a [*node*][node].\n\n*   If `node` is a [*comment*][comment], returns its `value`\n*   If `node` is a [*text*][text], applies normal white-space collapsing to its\n    `value`, as defined by the [CSS Text][css] spec\n*   If `node` is a [*root*][root] or [*element*][element], applies an algorithm\n    similar to the `innerText` getter as defined by [HTML][]\n\n###### Parameters\n\n*   `node` ([`Node`][node]) — Thing to stringify\n\n###### Returns\n\n`string` — Stringified `node`.\n\n###### Notes\n\n*   If `node` is an [*element*][element] that is not displayed (such as a\n    `head`), we’ll still use the `innerText` algorithm instead of switching to\n    `textContent`\n*   If [*descendants*][descendant] of `node` are [*elements*][element] that are\n    not displayed, they are ignored\n*   CSS is not considered, except for the default user agent style sheet\n*   A line feed is collapsed instead of ignored in cases where Fullwidth, Wide,\n    or Halfwidth East Asian Width characters are used, the same goes for a case\n    with Chinese, Japanese, or Yi writing systems\n*   Replaced [*elements*][element] (such as `audio`) are treated like\n    non-replaced *elements*\n\n## Security\n\n`hast-util-to-text` does not change the syntax tree so there are no\nopenings for [cross-site scripting (XSS)][xss] attacks.\n\n## Related\n\n*   [`hast-util-to-string`](https://github.com/rehypejs/rehype-minify/tree/master/packages/hast-util-to-string)\n    — Get the plain-text value (`textContent`)\n*   [`hast-util-from-text`](https://github.com/syntax-tree/hast-util-from-text)\n    — Set the plain-text value (`innerText`)\n*   [`hast-util-from-string`](https://github.com/rehypejs/rehype-minify/tree/master/packages/hast-util-from-string)\n    — Set the plain-text value (`textContent`)\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/.github`][contributing] for ways to get\nstarted.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://img.shields.io/travis/syntax-tree/hast-util-to-text.svg\n\n[build]: https://travis-ci.org/syntax-tree/hast-util-to-text\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/hast-util-to-text.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/hast-util-to-text\n\n[downloads-badge]: https://img.shields.io/npm/dm/hast-util-to-text.svg\n\n[downloads]: https://www.npmjs.com/package/hast-util-to-text\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/hast-util-to-text.svg\n\n[size]: https://bundlephobia.com/result?p=hast-util-to-text\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-spectrum-7b16ff.svg\n\n[chat]: https://spectrum.chat/unified/rehype\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[contributing]: https://github.com/syntax-tree/.github/blob/master/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/master/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/master/code-of-conduct.md\n\n[html]: https://html.spec.whatwg.org/#the-innertext-idl-attribute\n\n[css]: https://drafts.csswg.org/css-text/#white-space-phase-1\n\n[to-string]: https://github.com/rehypejs/rehype-minify/tree/master/packages/hast-util-to-string\n\n[descendant]: https://github.com/syntax-tree/unist#descendant\n\n[hast]: https://github.com/syntax-tree/hast\n\n[node]: https://github.com/syntax-tree/hast#nodes\n\n[root]: https://github.com/syntax-tree/hast#root\n\n[comment]: https://github.com/syntax-tree/hast#comment\n\n[text]: https://github.com/syntax-tree/hast#text\n\n[element]: https://github.com/syntax-tree/hast#element\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2019 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/hast-util-to-text/-/hast-util-to-text-2.0.0.tgz#c59afa8798145c10d40c2f34f92900f4dfc8ac69",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/hast-util-to-text/-/hast-util-to-text-2.0.0.tgz",
    "hash": "c59afa8798145c10d40c2f34f92900f4dfc8ac69",
    "integrity": "sha512-idXqFGmKInLKcFMbLvh0fldmV94o+aOdXL/z5H5XhPhUp/5vzycu7i15c8V9kC6W3XgGHg2uuiIcRJlWtESVfQ==",
    "registry": "npm",
    "packageName": "hast-util-to-text",
    "cacheIntegrity": "sha512-idXqFGmKInLKcFMbLvh0fldmV94o+aOdXL/z5H5XhPhUp/5vzycu7i15c8V9kC6W3XgGHg2uuiIcRJlWtESVfQ== sha1-xZr6h5gUXBDUDC80+SkA9N/IrGk="
  },
  "registry": "npm",
  "hash": "c59afa8798145c10d40c2f34f92900f4dfc8ac69"
}