{
  "manifest": {
    "name": "@pmmmwh/react-refresh-webpack-plugin",
    "version": "0.3.3",
    "description": "An **EXPERIMENTAL** Webpack plugin to enable \"Fast Refresh\" (also previously known as _Hot Reloading_) for React components.",
    "keywords": [
      "react",
      "javascript",
      "webpack",
      "refresh",
      "hmr",
      "hotreload",
      "livereload",
      "live",
      "edit",
      "hot",
      "reload"
    ],
    "homepage": "https://github.com/pmmmwh/react-refresh-webpack-plugin#readme",
    "bugs": {
      "url": "https://github.com/pmmmwh/react-refresh-webpack-plugin/issues"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/pmmmwh/react-refresh-webpack-plugin.git"
    },
    "license": "MIT",
    "author": {
      "name": "Michael Mok"
    },
    "main": "src/index.js",
    "types": "types/index.d.ts",
    "files": [
      "src",
      "types"
    ],
    "scripts": {
      "lint": "eslint --report-unused-disable-directives --ext .js .",
      "lint:fix": "yarn lint --fix",
      "format": "prettier --write \"**/*.{js,jsx,ts,tsx,json,md}\"",
      "format:check": "prettier --check \"**/*.{js,jsx,ts,tsx,json,md}\"",
      "generate-types": "tsc -p tsconfig.json && rimraf \"types/{helpers,runtime}\" && yarn format",
      "prepublishOnly": "rimraf types && yarn generate-types"
    },
    "dependencies": {
      "ansi-html": "^0.0.7",
      "error-stack-parser": "^2.0.6",
      "html-entities": "^1.2.1",
      "lodash.debounce": "^4.0.8",
      "native-url": "^0.2.6",
      "schema-utils": "^2.6.5"
    },
    "devDependencies": {
      "@types/json-schema": "^7.0.4",
      "@types/node": "^13.11.1",
      "@types/webpack": "^4.41.11",
      "eslint": "^6.8.0",
      "eslint-config-prettier": "^6.10.1",
      "prettier": "^2.0.4",
      "react-refresh": "^0.8.1",
      "rimraf": "^3.0.2",
      "type-fest": "^0.13.1",
      "typescript": "^3.8.3",
      "webpack": "^4.42.1",
      "webpack-dev-server": "^3.11.0",
      "webpack-hot-middleware": "^2.25.0",
      "webpack-plugin-serve": "^1.0.0"
    },
    "peerDependencies": {
      "@types/webpack": "^4.41.12",
      "react-refresh": "^0.8.2",
      "sockjs-client": "^1.4.0",
      "type-fest": "^0.13.1",
      "webpack-dev-server": "3.x",
      "webpack-hot-middleware": "2.x",
      "webpack-plugin-serve": "0.x || 1.x"
    },
    "peerDependenciesMeta": {
      "@types/webpack": {
        "optional": true
      },
      "sockjs-client": {
        "optional": true
      },
      "type-fest": {
        "optional": true
      },
      "webpack-dev-server": {
        "optional": true
      },
      "webpack-hot-middleware": {
        "optional": true
      },
      "webpack-plugin-serve": {
        "optional": true
      }
    },
    "engines": {
      "node": ">= 8.x"
    },
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-@pmmmwh-react-refresh-webpack-plugin-0.3.3-40a3d674f42a011b7f30a9609aa8fb68ec3c39c9-integrity/node_modules/@pmmmwh/react-refresh-webpack-plugin/package.json",
    "readmeFilename": "README.md",
    "readme": "# React Refresh Webpack Plugin\n\n[![Latest Version](https://img.shields.io/npm/v/@pmmmwh/react-refresh-webpack-plugin/latest)](https://www.npmjs.com/package/@pmmmwh/react-refresh-webpack-plugin/v/latest)\n[![Next Version](https://img.shields.io/npm/v/@pmmmwh/react-refresh-webpack-plugin/next)](https://www.npmjs.com/package/@pmmmwh/react-refresh-webpack-plugin/v/next)\n[![License](https://img.shields.io/github/license/pmmmwh/react-refresh-webpack-plugin)](./LICENSE)\n\nAn **EXPERIMENTAL** Webpack plugin to enable \"Fast Refresh\" (also previously known as _Hot Reloading_) for React components.\n\n## Installation\n\nFirst - this plugin is not 100% stable.\nIt works pretty reliably, and we have been testing it for some time, but there are still edge cases yet to be discovered.\nPlease **DO NOT** use it if you cannot afford to face breaking changes in the future.\n\n```sh\n# if you prefer npm\nnpm install -D @pmmmwh/react-refresh-webpack-plugin react-refresh\n\n# if you prefer yarn\nyarn add -D @pmmmwh/react-refresh-webpack-plugin react-refresh\n```\n\n## Usage\n\nFirst, apply the plugin in your Webpack configuration as follows:\n\n**webpack.config.js**\n\n```js\nconst ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin');\n// ... your other imports\n\n// You can tie this to whatever mechanisms you are using to detect a development environment.\n// For example, as shown here, is to tie that to `NODE_ENV` -\n// Then if you run `NODE_ENV=production webpack`, the constant will be set to false.\nconst isDevelopment = process.env.NODE_ENV !== 'production';\n\nmodule.exports = {\n  // It is suggested to run the plugin in development mode only\n  // If you are an advanced user and would like to setup Webpack yourselves,\n  // you can also use the `none` mode,\n  // but you will need to set `forceEnable: true` in the plugin options.\n  mode: isDevelopment ? 'development' : 'production',\n  // ... other configurations\n  plugins: [\n    // ... other plugins\n    // You could also keep the plugin in your production config,\n    // It will simply do nothing.\n    isDevelopment && new ReactRefreshWebpackPlugin(),\n  ].filter(Boolean),\n};\n```\n\nThen, update your Babel configuration.\nThis can either be done in your Webpack config (via options of `babel-loader`), or in the form of a `.babelrc`/`babel.config.js`.\n\n**webpack.config.js** (if you choose to inline the config)\n\n```js\nconst isDevelopment = process.env.NODE_ENV !== 'production';\n\nmodule.exports = {\n  // DO NOT apply the plugin in production mode!\n  mode: isDevelopment ? 'development' : 'production',\n  module: {\n    rules: [\n      // ... other rules\n      {\n        // for TypeScript, change the following to \"\\.[jt]sx?\"\n        test: /\\.jsx?$/,\n        exclude: /node_modules/,\n        use: [\n          // ... other loaders\n          {\n            loader: require.resolve('babel-loader'),\n            options: {\n              // ... other options\n              // DO NOT apply the Babel plugin in production mode!\n              plugins: [isDevelopment && require.resolve('react-refresh/babel')].filter(Boolean),\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n**.babelrc.js** (if you choose to extract the config)\n\n```js\nmodule.exports = (api) => {\n  // This caches the Babel config by environment.\n  api.cache.using(() => process.env.NODE_ENV);\n  return {\n    // ... other options\n    plugins: [\n      // ... other plugins\n      // Applies the react-refresh Babel plugin on non-production modes only\n      !api.env('production') && 'react-refresh/babel',\n    ].filter(Boolean),\n  };\n};\n```\n\nMore sample projects for common Webpack development setups are available in the [examples](https://github.com/pmmmwh/react-refresh-webpack-plugin/tree/master/examples) folder.\n\n> Note 1: If you use `webpack.config.ts`, please also install `type-fest` as a peer dependency.\n\n> Note 2: If you are using TypeScript (instead of Babel) as a transpiler, you will still need to use `babel-loader` to process your source code.\n> Check out this [sample project](https://github.com/pmmmwh/react-refresh-webpack-plugin/tree/master/examples/typescript-without-babel) on how to set this up.\n\n### Polyfill for Older Browsers\n\nIf you need to develop on IE11, you will need to polyfill the DOM URL API.\nThis can be done by adding the following before any of your code in the main entry (either one is fine):\n\n**Using `url-polyfill`**\n\n```js\nimport 'url-polyfill';\n```\n\n**Using `core-js`**\n\n```js\nimport 'core-js/features/url';\nimport 'core-js/features/url-search-params';\n```\n\n**Using `react-app-polyfill`**\n\n```js\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n```\n\n## Options\n\nThis plugin accepts a few options that are specifically targeted for advanced users.\n\n### `options.forceEnable`\n\nType: `boolean`\nDefault: `false`\n\nEnables the plugin forcefully.\nUseful if you want to use the plugin in production, or if you are using Webpack's `none` mode without `NODE_ENV`, for example.\n\n### `options.overlay`\n\nType: `boolean | ErrorOverlayOptions`\nDefault: `undefined`\n\nModifies how the error overlay integration works in the plugin.\n\n- If `options.overlay` is not provided or is `true`, the plugin will use the bundled error overlay interation.\n- If `options.overlay` is `false`, it will disable the error overlay integration.\n- If an `ErrorOverlayOptions` object is provided:\n  (**NOTE**: This is an advanced option that exists mostly for tools like `create-react-app` or `Next.js`)\n\n  - An optional `module` property could be defined.\n    If it is not defined, the bundled error overlay will be used.\n    If defined, it should reference a JS file that exports at least two functions with footprints as follows:\n\n    ```ts\n    function handleRuntimeError(error: Error) {}\n    function clearRuntimeErrors() {}\n    ```\n\n  - An optional `entry` property could be defined, which should also reference a JS file that contains code needed to set up your custom error overlay integration.\n    If it is not defined, the bundled error overlay entry will be used.\n    It expects the `module` file to export two more functions:\n\n    ```ts\n    function showCompileError(webpackErrorMessage: string) {}\n    function clearCompileErrors() {}\n    ```\n\n    Note that `webpackErrorMessage` is ANSI encoded, so you will need logic to parse it.\n\n  - An example configuration:\n    ```js\n    const options = {\n      overlay: {\n        entry: 'some-webpack-entry-file',\n        module: 'some-error-overlay-module',\n      },\n    };\n    ```\n\n#### `options.overlay.sockHost`\n\nType: `string`\nDefault: `window.location.hostname`\n\nSet this if you are running webpack on a host other than `window.location.hostname`.\nThis will be used by the error overlay module, and is available for `webpack-dev-server` only.\n\n#### `options.overlay.sockIntegration`\n\nType: `wds`, `whm`, `wps` or `string`\nDefault: `wds`\n\nThis controls how the error overlay connects to the sockets provided by several Webpack hot reload integrations.\n\n- If you use `webpack-dev-server`, you don't need to set this as it defaults to `wds`.\n- If you use `webpack-hot-middleware`, you should set this to `whm`.\n- If you use `webpack-plugin-serve`, you should set this to `wps`.\n- If you use anything else, or if you want to customize the socket handling yourself, you will have to provide a path to a module that will accept a message handler function and initializes the socket connection.\n  See the [`runtime/sockets`](https://github.com/pmmmwh/react-refresh-webpack-plugin/tree/master/src/runtime/sockets) folder for sample implementations.\n\n#### `options.overlay.sockPort`\n\nType: `number`\nDefault: `window.location.port`\n\nSet this if you are running webpack on a port other than `window.location.port`.\nThis will be used by the error overlay module, and is available for `webpack-dev-server` only.\n\n#### `options.overlay.sockPath`\n\nType: `string`\nDefault: `/sockjs-node`\n\nSet this if you are running webpack on a custom path.\nThis will be used by the error overlay module, and is available for `webpack-dev-server` only.\n\n### `options.useLegacyWDSSockets`\n\nType: `boolean`\nDefault: `false`\n\nSet this to true if you are using a `webpack-dev-server` version prior to 3.8 as it requires a custom SockJS implementation.\nIf you use this feature, you will also need to install `sockjs-client` as a peer dependency.\n\n## Related Work\n\n- [Initial Implementation by @maisano](https://gist.github.com/maisano/441a4bc6b2954205803d68deac04a716)\n",
    "licenseText": "MIT License\n\nCopyright (c) 2019 Michael Mok\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@pmmmwh/react-refresh-webpack-plugin/-/react-refresh-webpack-plugin-0.3.3.tgz#40a3d674f42a011b7f30a9609aa8fb68ec3c39c9",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@pmmmwh/react-refresh-webpack-plugin/-/react-refresh-webpack-plugin-0.3.3.tgz",
    "hash": "40a3d674f42a011b7f30a9609aa8fb68ec3c39c9",
    "integrity": "sha512-uc6FmPEegAZawSHjUMFQwU7EjaDn7zy1iD/KD/wBROL9F4378OES8MKMYHoRAKT61Fk7LxVKZSDR5VespMQiqw==",
    "registry": "npm",
    "packageName": "@pmmmwh/react-refresh-webpack-plugin",
    "cacheIntegrity": "sha512-uc6FmPEegAZawSHjUMFQwU7EjaDn7zy1iD/KD/wBROL9F4378OES8MKMYHoRAKT61Fk7LxVKZSDR5VespMQiqw== sha1-QKPWdPQqARt/MKlgmqj7aOw8Ock="
  },
  "registry": "npm",
  "hash": "40a3d674f42a011b7f30a9609aa8fb68ec3c39c9"
}