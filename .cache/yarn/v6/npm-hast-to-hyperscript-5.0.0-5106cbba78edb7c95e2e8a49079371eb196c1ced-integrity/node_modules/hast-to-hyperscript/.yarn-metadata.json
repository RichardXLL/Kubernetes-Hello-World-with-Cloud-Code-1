{
  "manifest": {
    "name": "hast-to-hyperscript",
    "version": "5.0.0",
    "description": "Transform HAST to something else through a hyperscript DSL",
    "license": "MIT",
    "keywords": [
      "hast",
      "rehype",
      "vdom",
      "virtual",
      "dom",
      "hyperscript",
      "dsl",
      "html"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/syntax-tree/hast-to-hyperscript.git"
    },
    "bugs": {
      "url": "https://github.com/syntax-tree/hast-to-hyperscript/issues"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "http://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "http://wooorm.com"
      },
      {
        "name": "Jannis Redmann",
        "email": "mail@jannisr.de"
      },
      {
        "name": "Koto Hajime",
        "email": "toxictoxer@gmail.com"
      }
    ],
    "files": [
      "index.js"
    ],
    "dependencies": {
      "comma-separated-tokens": "^1.0.0",
      "property-information": "^4.0.0",
      "space-separated-tokens": "^1.0.0",
      "style-to-object": "^0.2.1",
      "unist-util-is": "^2.0.0",
      "web-namespaces": "^1.1.2"
    },
    "devDependencies": {
      "browserify": "^16.0.0",
      "hyperscript": "^2.0.2",
      "nyc": "^12.0.0",
      "prettier": "^1.13.5",
      "react": "^16.1.1",
      "react-dom": "^16.1.1",
      "rehype": "^5.0.0",
      "remark-cli": "^5.0.0",
      "remark-preset-wooorm": "^4.0.0",
      "tape": "^4.0.0",
      "tinyify": "^2.4.3",
      "unist-builder": "^1.0.1",
      "vdom-to-html": "^2.3.1",
      "virtual-dom": "^2.1.1",
      "xo": "^0.21.0"
    },
    "scripts": {
      "format": "remark . -qfo && prettier --write '**/*.js' && xo --fix",
      "build-bundle": "browserify index.js -s hastToHyperscript > hast-to-hyperscript.js",
      "build-mangle": "browserify index.js -p tinyify -s hastToHyperscript > hast-to-hyperscript.min.js",
      "build": "npm run build-bundle && npm run build-mangle",
      "test-api": "node test",
      "test-coverage": "nyc --reporter lcov tape test.js",
      "test": "npm run format && npm run build && npm run test-coverage"
    },
    "nyc": {
      "check-coverage": true,
      "lines": 100,
      "functions": 100,
      "branches": 100
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true,
      "esnext": false,
      "rules": {
        "unicorn/prefer-type-error": "off",
        "guard-for-in": "off",
        "no-self-compare": "off"
      }
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-hast-to-hyperscript-5.0.0-5106cbba78edb7c95e2e8a49079371eb196c1ced-integrity/node_modules/hast-to-hyperscript/package.json",
    "readmeFilename": "readme.md",
    "readme": "# hast-to-hyperscript [![Build Status][travis-badge]][travis] [![Coverage Status][codecov-badge]][codecov]\n\nTransform [HAST][] to something else through a [hyperscript][] DSL.\n\n## Installation\n\n[npm][]:\n\n```bash\nnpm install hast-to-hyperscript\n```\n\n## Usage\n\n```javascript\nvar toH = require('hast-to-hyperscript')\nvar h = require('hyperscript')\n\nvar tree = {\n  type: 'element',\n  tagName: 'p',\n  properties: {id: 'alpha', className: ['bravo']},\n  children: [\n    {type: 'text', value: 'charlie '},\n    {\n      type: 'element',\n      tagName: 'strong',\n      properties: {style: 'color: red;'},\n      children: [{type: 'text', value: 'delta'}]\n    },\n    {type: 'text', value: ' echo.'}\n  ]\n}\n\n// Transform (`hyperscript` needs `outerHTML` to stringify):\nvar doc = toH(h, tree).outerHTML\n\nconsole.log(doc)\n```\n\nYields:\n\n```html\n<p class=\"bravo\" id=\"alpha\">charlie <strong>delta</strong> echo.</p>\n```\n\n## API\n\n### `toH(h, node[, options|prefix])`\n\nTransform [HAST][] to something else through a [hyperscript][] DSL.\n\n###### Parameters\n\n*   `h` ([`Function`][h])\n*   `node` ([`Element`][element])\n*   `prefix` — Treated as `{prefix: prefix}`\n*   `options.prefix` (`string` or `boolean`, optional)\n    — Prefix to use as a prefix for keys passed in `attrs` to `h()`,\n    this behaviour is turned off by passing `false`, turned on by passing\n    a `string`.  By default, `h-` is used as a prefix if the given `h`\n    is detected as being `virtual-dom/h` or `React.createElement`\n*   `options.space` (enum, `'svg'` or `'html'`, default: `'html'`)\n    — Whether `node` is in the `'html'` or `'svg'` space.\n    If an `svg` element is found when inside the HTML space, `toH` automatically\n    switches to the SVG space when entering the element, and switches back when\n    leaving\n\n###### Returns\n\n`*` — Anything returned by invoking `h()`.\n\n### `function h(name, attrs, children)`\n\nTransform [HAST][] to something else through a hyperscript DSL.\n\n###### Parameters\n\n*   `name` (`string`) — Tag-name of element to create\n*   `attrs` (`Object.<string>`) — Attributes to set\n*   `children` (`Array.<* | string>`) — List of children and text,\n    where children are the result of invoking `h()` previously\n\n###### Returns\n\n`*` — Anything.\n\n###### Caveats\n\n**Nodes**: Most hyperscript implementations only support elements and text (as\nleave nodes).  HAST supports `doctype`, `comment`, and `root` as well.\n\n*   If anything other than an `element` or `root` node is given,\n    `hast-to-hyperscript` throws\n*   If a `root` is given with one element child, that element is\n    transformed\n*   If a `root` with no children, a non-element only child, or more than one\n    children, the children are wrapped in a `div` element\n\nIf unknown nodes are found deeper in the tree, they are ignored: only `text`\nand `element` nodes are transformed.\n\n**Support**: Although there are lots of libs mentioning support for this\ninterface, there are significant differences between them.  For example,\nhyperscript doesn’t support classes in `attrs`, `virtual-dom/h` needs an\n`attributes` object inside `attrs` most of the time.  `hast-to-hyperscript`\nworks around these differences for:\n\n*   [`React.createElement`][react]\n*   [`virtual-dom/h`][vdom]\n*   [`hyperscript`][hyperscript]\n\n## Related\n\n*   [`hastscript`][hastscript]\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/hast`][contributing] for ways to get\nstarted.\n\nThis organisation has a [Code of Conduct][coc].  By interacting with this\nrepository, organisation, or community you agree to abide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[travis-badge]: https://img.shields.io/travis/syntax-tree/hast-to-hyperscript.svg\n\n[travis]: https://travis-ci.org/syntax-tree/hast-to-hyperscript\n\n[codecov-badge]: https://img.shields.io/codecov/c/github/syntax-tree/hast-to-hyperscript.svg\n\n[codecov]: https://codecov.io/github/syntax-tree/hast-to-hyperscript\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: LICENSE\n\n[author]: http://wooorm.com\n\n[hast]: https://github.com/syntax-tree/hast\n\n[element]: https://github.com/syntax-tree/hast#element\n\n[vdom]: https://github.com/Matt-Esch/virtual-dom/tree/master/virtual-hyperscript\n\n[hyperscript]: https://github.com/dominictarr/hyperscript\n\n[h]: #function-hname-attrs-children\n\n[react]: https://facebook.github.io/react/docs/glossary.html#react-elements\n\n[hastscript]: https://github.com/syntax-tree/hastscript\n\n[contributing]: https://github.com/syntax-tree/hast/blob/master/contributing.md\n\n[coc]: https://github.com/syntax-tree/hast/blob/master/code-of-conduct.md\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2016 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/hast-to-hyperscript/-/hast-to-hyperscript-5.0.0.tgz#5106cbba78edb7c95e2e8a49079371eb196c1ced",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/hast-to-hyperscript/-/hast-to-hyperscript-5.0.0.tgz",
    "hash": "5106cbba78edb7c95e2e8a49079371eb196c1ced",
    "integrity": "sha512-DLl3eYTz8uwwzEubDUdCChsR5t5b2ne+yvHrA2h58Suq/JnN3+Gsb9Tc4iZoCCsykmFUc6UUpwxTmQXs0akSeg==",
    "registry": "npm",
    "packageName": "hast-to-hyperscript",
    "cacheIntegrity": "sha512-DLl3eYTz8uwwzEubDUdCChsR5t5b2ne+yvHrA2h58Suq/JnN3+Gsb9Tc4iZoCCsykmFUc6UUpwxTmQXs0akSeg== sha1-UQbLunjtt8leLopJB5Nx6xlsHO0="
  },
  "registry": "npm",
  "hash": "5106cbba78edb7c95e2e8a49079371eb196c1ced"
}