{
  "manifest": {
    "name": "react-window",
    "version": "1.8.5",
    "description": "React components for efficiently rendering large, scrollable lists and tabular data",
    "author": {
      "name": "Brian Vaughn",
      "email": "brian.david.vaughn@gmail.com",
      "url": "https://github.com/bvaughn/"
    },
    "contributors": [
      {
        "name": "Brian Vaughn",
        "email": "brian.david.vaughn@gmail.com",
        "url": "https://github.com/bvaughn/"
      }
    ],
    "license": "MIT",
    "homepage": "http://react-window.now.sh/",
    "repository": {
      "type": "git",
      "url": "https://github.com/bvaughn/react-window.git"
    },
    "bugs": {
      "url": "https://github.com/bvaughn/react-window/issues"
    },
    "engines": {
      "node": ">8.0.0"
    },
    "keywords": [
      "react",
      "reactjs",
      "virtual",
      "window",
      "windowed",
      "list",
      "scrolling",
      "infinite",
      "virtualized",
      "table",
      "grid",
      "spreadsheet"
    ],
    "main": "dist/index.cjs.js",
    "module": "dist/index.esm.js",
    "files": [
      "dist",
      "src/*.js"
    ],
    "scripts": {
      "flow": "flow check --max-warnings=0 src && flow check website",
      "precommit": "lint-staged",
      "prettier": "prettier --write '**/*.{js,json,css}'",
      "linc": "lint-staged",
      "lint": "eslint '**/*.js'",
      "test": "cross-env CI=1 react-scripts test --env=jsdom",
      "test:watch": "react-scripts test --env=jsdom",
      "build:flow": "cp flow-template dist/index.cjs.js.flow && cp flow-template dist/index.esm.js.flow",
      "build:source": "rollup -c",
      "build": "del dist && mkdir dist && yarn build:flow && yarn build:source",
      "start": "rollup -c -w",
      "prepare": "yarn run build",
      "website:build": "cd website && yarn build",
      "website:deploy": "cd website && yarn deploy",
      "website:run": "cd website && yarn start"
    },
    "lint-staged": {
      "{website,src}/**/*.{js,json,css}": [
        "prettier --write",
        "git add"
      ],
      "**/*.js": "eslint --max-warnings 0"
    },
    "dependencies": {
      "@babel/runtime": "^7.0.0",
      "memoize-one": ">=3.1.1 <6"
    },
    "peerDependencies": {
      "react": "^15.0.0 || ^16.0.0",
      "react-dom": "^15.0.0 || ^16.0.0"
    },
    "devDependencies": {
      "@babel/core": "^7.0.0",
      "@babel/plugin-proposal-class-properties": "^7.0.0",
      "@babel/plugin-transform-runtime": "^7.0.0",
      "@babel/preset-env": "^7.0.0",
      "@babel/preset-flow": "^7.0.0",
      "babel-core": "^7.0.0-bridge.0",
      "babel-eslint": "^9.0.0",
      "babel-plugin-annotate-pure-calls": "^0.3.0",
      "cross-env": "^5.1.4",
      "del-cli": "^1.1.0",
      "eslint": "^4.19.1",
      "eslint-config-prettier": "^2.9.0",
      "eslint-config-react-app": "^2.1.0",
      "eslint-config-standard": "^11.0.0",
      "eslint-config-standard-react": "^6.0.0",
      "eslint-plugin-flowtype": "^2.47.1",
      "eslint-plugin-import": "^2.11.0",
      "eslint-plugin-jsx-a11y": "^5",
      "eslint-plugin-node": "^6.0.1",
      "eslint-plugin-prettier": "^2.6.0",
      "eslint-plugin-promise": "^3.7.0",
      "eslint-plugin-react": "^7.7.0",
      "eslint-plugin-standard": "^3.0.1",
      "flow-bin": "^0.101.0",
      "gh-pages": "^1.1.0",
      "lint-staged": "^7.0.5",
      "prettier": "^1.12.1",
      "react": "^16.8.4",
      "react-dom": "^16.8.4",
      "react-is": "^16.8.4",
      "react-scripts": "^1.1.1",
      "react-test-renderer": "^16.7.0",
      "rollup": "^1.4.1",
      "rollup-plugin-babel": "^4.3.2",
      "rollup-plugin-commonjs": "^9.2.1",
      "rollup-plugin-node-resolve": "^4.0.1",
      "rollup-plugin-replace": "^2.2.0",
      "rollup-plugin-terser": "^5.1.0"
    },
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-react-window-1.8.5-a56b39307e79979721021f5d06a67742ecca52d1-integrity/node_modules/react-window/package.json",
    "readmeFilename": "README.md",
    "readme": "# react-window\n\n> React components for efficiently rendering large lists and tabular data\n\n[![NPM registry](https://img.shields.io/npm/v/react-window.svg?style=for-the-badge)](https://yarnpkg.com/en/package/react-window) [![Travis](https://img.shields.io/badge/ci-travis-green.svg?style=for-the-badge)](https://travis-ci.org/bvaughn/react-window) [![NPM license](https://img.shields.io/badge/license-mit-red.svg?style=for-the-badge)](LICENSE.md)\n\n## Install\n\n```bash\n# Yarn\nyarn add react-window\n\n# NPM\nnpm install --save react-window\n```\n\n## Usage\n\nLearn more at [react-window.now.sh](https://react-window.now.sh/):\n\n## Related libraries\n\n* [`react-virtualized-auto-sizer`](https://npmjs.com/package/react-virtualized-auto-sizer): HOC that grows to fit all of the available space and passes the width and height values to its child.\n* [`react-window-infinite-loader`](https://npmjs.com/package/react-window-infinite-loader): Helps break large data sets down into chunks that can be just-in-time loaded as they are scrolled into view. It can also be used to create infinite loading lists (e.g. Facebook or Twitter).\n\n## Frequently asked questions\n\n### How is `react-window` different from `react-virtualized`?\nI wrote `react-virtualized` several years ago. At the time, I was new to both React and the concept of windowing. Because of this, I made a few API decisions that I later came to regret. One of these was adding too many non-essential features and components. Once you add something to an open source project, removing it is pretty painful for users.\n\n`react-window` is a complete rewrite of `react-virtualized`. I didn't try to solve as many problems or support as many use cases. Instead I focused on making the package **smaller**<sup>1</sup> and **faster**. I also put a lot of thought into making the API (and documentation) as beginner-friendly as possible (with the caveat that windowing is still kind of an advanced use case).\n\nIf `react-window` provides the functionality your project needs, I would strongly recommend using it instead of `react-virtualized`. However if you need features that only `react-virtualized` provides, you have two options:\n\n1. Use `react-virtualized`. (It's still widely used by a lot of successful projects!)\n2. Create a component that decorates one of the `react-window` primitives and adds the functionality you need. You may even want to release this component to NPM (as its own, standalone package)! ðŸ™‚\n\n<sup>1 - Adding a `react-virtualized` list to a CRA project increases the (gzipped) build size by ~33.5 KB. Adding a `react-window` list to a CRA project increases the (gzipped) build size by &lt;2 KB.</sup>\n\n### Can a list or a grid fill 100% the width or height of a page?\n\nYes. I recommend using the [`react-virtualized-auto-sizer` package](https://npmjs.com/package/react-virtualized-auto-sizer):\n\n<img width=\"336\" alt=\"screen shot 2019-03-07 at 7 29 08 pm\" src=\"https://user-images.githubusercontent.com/29597/54005716-50f41880-410f-11e9-864f-a65bbdf49e07.png\">\n\nHere's a [Code Sandbox demo](https://codesandbox.io/s/3vnx878jk5).\n\n### Why is my list blank when I scroll?\n\nIf your list looks something like this...\n\n<img src=\"https://user-images.githubusercontent.com/29597/54005352-eb535c80-410d-11e9-80b2-d3d02db1f599.gif\" width=\"302\" height=\"152\">\n\n...then you probably forgot to use the `style` parameter! Libraries like react-window work by absolutely positioning the list items (via an inline style), so don't forget to attach it to the DOM element you render!\n\n<img width=\"257\" alt=\"screen shot 2019-03-07 at 7 21 48 pm\" src=\"https://user-images.githubusercontent.com/29597/54005433-45ecb880-410e-11e9-8721-420ff1a153da.png\">\n\n### Can I lazy load data for my list?\n\nYes. I recommend using the [`react-window-infinite-loader` package](https://npmjs.com/package/react-window-infinite-loader):\n\n<img width=\"368\" alt=\"screen shot 2019-03-07 at 7 32 32 pm\" src=\"https://user-images.githubusercontent.com/29597/54006733-653a1480-4113-11e9-907b-08ca5e27b3f9.png\">\n\nHere's a [Code Sandbox demo](https://codesandbox.io/s/5wqo7z2np4).\n\n### Can I attach custom properties or event handlers?\n\nYes, using the `outerElementType` prop.\n\n<img width=\"412\" alt=\"Screen Shot 2019-03-12 at 8 58 09 AM\" src=\"https://user-images.githubusercontent.com/29597/54215333-f9ee9a80-44a4-11e9-9142-34c67026d950.png\">\n\nHere's a [Code Sandbox demo](https://codesandbox.io/s/4zqx79nww0).\n\n### Can I add padding to the top and bottom of a list?\n\nYes, although it requires a bit of inline styling.\n\n<img width=\"418\" alt=\"Screen Shot 2019-06-02 at 8 38 18 PM\" src=\"https://user-images.githubusercontent.com/29597/58774454-65ad4480-8576-11e9-8889-07044fd41393.png\">\n\nHere's a [Code Sandbox demo](https://codesandbox.io/s/react-window-list-padding-dg0pq).\n\n### Can I add gutter or padding between items?\n\nYes, although it requires a bit of inline styling.\n\n<img width=\"416\" alt=\"Screen Shot 2019-03-26 at 6 33 56 PM\" src=\"https://user-images.githubusercontent.com/29597/55043972-c14ad700-4ff5-11e9-9caa-2e9f4d85f96c.png\">\n\nHere's a [Code Sandbox demo](https://codesandbox.io/s/2w8wmlm89p).\n\n### Does this library support \"sticky\" items?\n\nYes, although it requires a small amount of user code. Here's a [Code Sandbox demo](https://codesandbox.io/s/0mk3qwpl4l).\n\n## License\n\nMIT Â© [bvaughn](https://github.com/bvaughn)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2018 Brian Vaughn\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-window/-/react-window-1.8.5.tgz#a56b39307e79979721021f5d06a67742ecca52d1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-window/-/react-window-1.8.5.tgz",
    "hash": "a56b39307e79979721021f5d06a67742ecca52d1",
    "integrity": "sha512-HeTwlNa37AFa8MDZFZOKcNEkuF2YflA0hpGPiTT9vR7OawEt+GZbfM6wqkBahD3D3pUjIabQYzsnY/BSJbgq6Q==",
    "registry": "npm",
    "packageName": "react-window",
    "cacheIntegrity": "sha512-HeTwlNa37AFa8MDZFZOKcNEkuF2YflA0hpGPiTT9vR7OawEt+GZbfM6wqkBahD3D3pUjIabQYzsnY/BSJbgq6Q== sha1-pWs5MH55l5chAh9dBqZ3QuzKUtE="
  },
  "registry": "npm",
  "hash": "a56b39307e79979721021f5d06a67742ecca52d1"
}