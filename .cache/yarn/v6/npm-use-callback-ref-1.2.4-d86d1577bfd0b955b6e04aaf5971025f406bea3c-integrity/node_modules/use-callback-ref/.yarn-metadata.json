{
  "manifest": {
    "name": "use-callback-ref",
    "version": "1.2.4",
    "description": "The same useRef, but with callback",
    "main": "dist/es5/index.js",
    "sideEffects": false,
    "scripts": {
      "test": "ts-react-toolbox test",
      "bootstrap": "ts-react-toolbox init",
      "dev": "ts-react-toolbox dev",
      "test:ci": "ts-react-toolbox test --runInBand --coverage",
      "build": "ts-react-toolbox build",
      "prepublish": "yarn build",
      "release": "ts-react-toolbox release",
      "lint": "ts-react-toolbox lint",
      "static": "ts-react-toolbox publish",
      "format": "ts-react-toolbox format",
      "analyze": "ts-react-toolbox analyze"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/theKashey/use-callback-ref/"
    },
    "author": {
      "name": "theKashey",
      "email": "thekashey@gmail.com"
    },
    "license": "MIT",
    "dependencies": {},
    "devDependencies": {
      "ts-react-toolbox": "^0.2.11"
    },
    "peerDependencies": {
      "react": "^16.8.0",
      "@types/react": "^16.8.0"
    },
    "peerDependenciesMeta": {
      "@types/react": {
        "optional": true
      }
    },
    "engines": {
      "node": ">=8.5.0"
    },
    "jsnext:main": "dist/es2015/index.js",
    "module": "dist/es2015/index.js",
    "types": "dist/es5/index.d.ts",
    "files": [
      "dist"
    ],
    "keywords": [
      "react",
      "hoot",
      "useRef",
      "createRef"
    ],
    "size-limit": [
      {
        "path": "dist/es2015/index.js",
        "limit": "0.4 KB"
      },
      {
        "path": "dist/es2015/useRef.js",
        "limit": "0.2 KB"
      },
      {
        "path": "dist/es2015/useMergeRef.js",
        "limit": "0.2 KB"
      }
    ],
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-use-callback-ref-1.2.4-d86d1577bfd0b955b6e04aaf5971025f406bea3c-integrity/node_modules/use-callback-ref/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n  <h1>ðŸ¤™ use-callback-ref ðŸ“ž</h1>\n  <br/>\n  The same `useRef` but it will callback: ðŸ“ž Hello! Your ref was changed!\n  <br/>\n    <a href=\"https://www.npmjs.com/package/use-callback-ref\">\n      <img src=\"https://img.shields.io/npm/v/use-callback-ref.svg?style=flat-square\" />\n    </a>\n    <a href=\"https://travis-ci.org/theKashey/use-callback-ref\">\n       <img alt=\"Travis\" src=\"https://img.shields.io/travis/theKashey/use-callback-ref/master.svg?style=flat-square\">\n    </a>\n    <a href=\"https://bundlephobia.com/result?p=use-callback-ref\">\n      <img src=\"https://img.shields.io/bundlephobia/minzip/use-callback-ref.svg\" alt=\"bundle size\">\n    </a> \n</div>\n\n---\n\n> Keep in mind that useRef doesn't notify you when its content changes.\nMutating the .current property doesn't cause a re-render.\nIf you want to run some code when React attaches or detaches a ref to a DOM node, \nyou may want to use ~~a callback ref instead~~ .... __useCallbackRef__ instead.\n\nâ€“ [Hooks API Reference](https://reactjs.org/docs/hooks-reference.html#useref)\n\nRead more about `use-callback` pattern and use cases: \n- https://dev.to/thekashey/the-same-useref-but-it-will-callback-8bo\n\n\nThis library exposes helpers to handle any case related to `ref` _lifecycle_\n\n- `useCallbackRef` - react on hook change\n- `mergeRefs` - merge multiple refs together. For, actually, fork\n- `transformRef` - transform one ref to anther\n- `refToCallback` - convert RefObject to an old callback-style ref\n- `assignRef` - assign value to the ref, regardless of it's form\n\nAll functions are tree shakable, but even together it's __less then 300b__.\n\n# API\nðŸ’¡ Some commands are hooks based, and returns the same refs/functions every render. \nBut some are not, to be used in classes or non-react code.\n\n## useRef API\nðŸ¤” Use case: every time you have to react to ref change\n\nAPI is 99% compatible with React `createRef` and `useRef`, and just adds another argument - `callback`,\nwhich would be called on __ref update__.\n\n#### createCallbackRef - to replace React.createRef\n- `createCallbackRef(callback)` -  would call provided `callback` when ref is changed.\n\n#### useCallbackRef - to replace React.useRef\n- `useCallbackRef(initialValue, callback)` - would call provided `callback` when ref is changed.\n\n> `callback` in both cases is `callback(newValue, oldValue)`. Callback would not be called if newValue and oldValue is the same.\n\n```js\nimport {useRef, createRef, useState} from 'react';\nimport {useCallbackRef, createCallbackRef} from 'use-callback-ref';\n\nconst Component = () => {\n  const [,forceUpdate] = useState();\n  // I dont need callback when ref changes\n  const ref = useRef(null); \n  \n  // but sometimes - it could be what you need\n  const anotherRef = useCallbackRef(null, () => forceUpdate());\n  \n  useEffect( () => {\n    // now it's just possible\n  }, [anotherRef.current]) // react to dom node change\n}\n```\n\nðŸ’¡ You can use `useCallbackRef` to convert RefObject into RefCallback, creating bridges between the old and the new code\n```js\n// some old component\nconst onRefUpdate = (newValue) => {...}\nconst refObject = useCallbackRef(null, onRefUpdate);\n// ...\n<SomeNewComponent ref={refObject}/>\n```\n\n## assignRef\nðŸ¤” Use case: every time you need to assign ref manually, and you dont know the shape of the ref\n\n`assignRef(ref, value)` - assigns `values` to the `ref`. `ref` could be RefObject or RefCallback.\n\n```\nðŸš« ref.current = value // what if it's a callback-ref?\nðŸš« ref(value) // but what if it's a object ref?\n\nimport {assignRef} from \"use-callback-ref\";\nâœ… assignRef(ref, value); \n```\n\n## useTransformRef (to replace React.useImperativeHandle)\nðŸ¤” Use case: ref could be different. \n`transformRef(ref, tranformer):Ref` - return a new `ref` which would propagate all changes to the provided `ref` with applied `transform`\n\n```js\n// before\nconst ResizableWithRef = forwardRef((props, ref) =>\n  <Resizable {...props} ref={i => i && ref(i.resizable)}/>\n);\n\n// after\n\nconst ResizableWithRef = forwardRef((props, ref) =>\n  <Resizable {...props} ref={transformRef(ref, i => i ? i.resizable : null)}/>\n);\n```\n\n## refToCallback\n`refToCallback(ref: RefObject): RefCallback` - for compatibility between the old and the new code.\nFor the compatibility between `RefCallback` and RefObject use `useCallbackRef(undefined, callback)` \n\n## useMergeRefs\n`mergeRefs(refs: arrayOfRefs, [defaultValue]):ReactMutableRef` - merges a few refs together\n\nWhen developing low level UI components, it is common to have to use a local ref but also support an external one using React.forwardRef. Natively, React does not offer a way to set two refs inside the ref property. This is the goal of this small utility.\n\n```js\nimport React from 'react'\nimport {useMergeRefs} from 'use-callback-ref'\n\nconst MergedComponent = React.forwardRef((props, ref) => {\n  const localRef = React.useRef();\n  // ...\n  // both localRef and ref would be populated with the `ref` to a `div`\n  return <div ref={useMergeRefs([localRef, ref])} />\n})\n```\n\n## mergeRefs \n`mergeRefs(refs: arrayOfRefs, [defaultValue]):ReactMutableRef` - merges a few refs together\nis a non-hook based version. Will produce the new `ref` every run, causing the old one to unmount, and be _populated_ with the `null` value.\n\n> mergeRefs are based on https://github.com/smooth-code/react-merge-refs, just exposes a RefObject, instead of a callback\n\n`mergeRefs` are \"safe\" to use as a part of other hooks-based commands, but don't forget - it returns a new object every call. \n\n## Is it a rocket science?\n\nNo, `RefObject` is no more than `{current: ref}`, and `use-callback-ref` is no more than `getter` and `setter` on that field.\n\n# License\nMIT\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/use-callback-ref/-/use-callback-ref-1.2.4.tgz#d86d1577bfd0b955b6e04aaf5971025f406bea3c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/use-callback-ref/-/use-callback-ref-1.2.4.tgz",
    "hash": "d86d1577bfd0b955b6e04aaf5971025f406bea3c",
    "integrity": "sha512-rXpsyvOnqdScyied4Uglsp14qzag1JIemLeTWGKbwpotWht57hbP78aNT+Q4wdFKQfQibbUX4fb6Qb4y11aVOQ==",
    "registry": "npm",
    "packageName": "use-callback-ref",
    "cacheIntegrity": "sha512-rXpsyvOnqdScyied4Uglsp14qzag1JIemLeTWGKbwpotWht57hbP78aNT+Q4wdFKQfQibbUX4fb6Qb4y11aVOQ== sha1-2G0Vd7/QuVW24EqvWXECX0Br6jw="
  },
  "registry": "npm",
  "hash": "d86d1577bfd0b955b6e04aaf5971025f406bea3c"
}