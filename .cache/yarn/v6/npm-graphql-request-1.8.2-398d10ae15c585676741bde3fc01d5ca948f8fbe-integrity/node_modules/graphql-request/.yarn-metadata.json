{
  "manifest": {
    "name": "graphql-request",
    "version": "1.8.2",
    "main": "dist/src/index.js",
    "typings": "./dist/src/index.d.ts",
    "files": [
      "dist"
    ],
    "bundlesize": [
      {
        "path": "./dist/src/index.js",
        "maxSize": "15 kB"
      }
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/graphcool/graphql-request.git"
    },
    "keywords": [
      "graphql",
      "request",
      "fetch",
      "graphql-client",
      "apollo"
    ],
    "author": {
      "name": "Johannes Schickling",
      "email": "johannes@graph.cool"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/graphcool/graphql-request/issues"
    },
    "homepage": "https://github.com/graphcool/graphql-request",
    "scripts": {
      "prepublish": "npm run build",
      "build": "rm -rf dist && tsc -d",
      "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
      "test": "npm run lint && npm run build && ava --serial && npm run size",
      "size": "bundlesize"
    },
    "devDependencies": {
      "@types/fetch-mock": "5.12.2",
      "@types/node": "8.5.5",
      "ava": "0.25.0",
      "bundlesize": "0.17.0",
      "fetch-mock": "5.13.1",
      "tslint": "5.9.1",
      "tslint-config-standard": "7.0.0",
      "typescript": "2.7.2"
    },
    "dependencies": {
      "cross-fetch": "2.2.2"
    },
    "_registry": "npm",
    "_loc": "/home/senmioxl/.cache/yarn/v6/npm-graphql-request-1.8.2-398d10ae15c585676741bde3fc01d5ca948f8fbe-integrity/node_modules/graphql-request/package.json",
    "readmeFilename": "README.md",
    "readme": "# graphql-request\n\n[![CircleCI](https://circleci.com/gh/prismagraphql/graphql-request.svg?style=shield)](https://circleci.com/gh/prismagraphql/graphql-request) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n📡 Minimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n## Features\n\n* Most **simple and lightweight** GraphQL client\n* Promise-based API (works with `async` / `await`)\n* Typescript support (Flow coming soon)\n\n\n## Install\n\n```sh\nnpm install graphql-request\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request } from 'graphql-request'\n\nconst query = `{\n  Movie(title: \"Inception\") {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then(data => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then(data => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then(data => console.log(data))\n```\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient('my-endpoint', {\n  headers: {\n    Authorization: 'Bearer my-jwt-token',\n  },\n})\n\nconst query = `{\n  Movie(title: \"Inception\") {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nclient.request(query).then(data => console.log(data))\n```\n\n### Passing more options to fetch\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient('my-endpoint', {\n credentials: 'include',\n mode: 'cors'\n})\n\nconst query = `{\n  Movie(title: \"Inception\") {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nclient.request(query).then(data => console.log(data))\n```\n\n### Using variables\n\n```js\nimport { request } from 'graphql-request'\n\nconst query = `query getMovie($title: String!) {\n  Movie(title: $title) {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nconst variables = {\n  title: 'Inception',\n}\n\nrequest('my-endpoint', query, variables).then(data => console.log(data))\n```\n\n### Error handling\n\n```js\nimport { request } from 'graphql-request'\n\nconst wrongQuery = `{\n  some random stuff\n}`\n\nrequest('my-endpoint', query)\n  .then(data => console.log(data))\n  .catch(err => {\n    console.log(err.response.errors) // GraphQL response errors\n    console.log(err.response.data) // Response data if available\n  })\n```\n\n### Using `require` instead of `import`\n\n```js\nconst { request } = require('graphql-request')\n\nconst query = `{\n  Movie(title: \"Inception\") {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nrequest('my-endpoint', query).then(data => console.log(data))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie/node-fetch\n```\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\n// use this instead for cookie support\nglobal['fetch'] = require('fetch-cookie/node-fetch')(require('node-fetch'))\n\nconst client = new GraphQLClient('my-endpoint')\n\nconst query = `{\n  Movie(title: \"Inception\") {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nclient.request(query).then(data => console.log(data))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest } from 'graphql-request'\n\nconst query = `{\n  Movie(title: \"Inception\") {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nrawRequest('my-endpoint', query).then(({data, extensions}) => console.log(data, extensions))\n```\n\n### More examples coming soon...\n\n* Fragments\n* Using [`graphql-tag`](https://github.com/apollographql/graphql-tag)\n* Typed Typescript return values\n\n## FAQ\n\n### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n\n### So what about Lokka?\n\nLokka is great but it still requires [a lot of setup code](https://github.com/kadirahq/lokka-transport-http) to be able to send a simple GraphQL query. `graphql-request` does less work compared to Lokka but is a lot simpler to use.\n\n\n## Help & Community [![Slack Status](https://slack.prisma.io/badge.svg)](https://slack.prisma.io)\n\nJoin our [Slack community](http://slack.prisma.io/) if you run into issues or have questions. We love talking to you!\n\n<p align=\"center\"><a href=\"https://oss.prisma.io\"><img src=\"https://imgur.com/IMU2ERq.png\" alt=\"Prisma\" height=\"170px\"></a></p>\n",
    "description": "[![CircleCI](https://circleci.com/gh/prismagraphql/graphql-request.svg?style=shield)](https://circleci.com/gh/prismagraphql/graphql-request) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)",
    "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/graphql-request/-/graphql-request-1.8.2.tgz#398d10ae15c585676741bde3fc01d5ca948f8fbe",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/graphql-request/-/graphql-request-1.8.2.tgz",
    "hash": "398d10ae15c585676741bde3fc01d5ca948f8fbe",
    "integrity": "sha512-dDX2M+VMsxXFCmUX0Vo0TopIZIX4ggzOtiCsThgtrKR4niiaagsGTDIHj3fsOMFETpa064vzovI+4YV4QnMbcg==",
    "registry": "npm",
    "packageName": "graphql-request",
    "cacheIntegrity": "sha512-dDX2M+VMsxXFCmUX0Vo0TopIZIX4ggzOtiCsThgtrKR4niiaagsGTDIHj3fsOMFETpa064vzovI+4YV4QnMbcg== sha1-OY0QrhXFhWdnQb3j/AHVypSPj74="
  },
  "registry": "npm",
  "hash": "398d10ae15c585676741bde3fc01d5ca948f8fbe"
}